{"version":3,"file":"jquery.tablesorter.min.js","sources":["../src/jquery.tablesorter.js"],"sourcesContent":["/*eslint-disable*/\n(function(factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(['jquery'], factory);\n    } else if (typeof module === 'object' && typeof module.exports === 'object') {\n        module.exports = factory(require('jquery'));\n    } else {\n        factory(jQuery);\n    }\n}(function(jQuery) {\n\n    /*! TableSorter (FORK) v2.31.0 *//*\n* Client-side table sorting with ease!\n* @requires jQuery v1.2.6+\n*\n* Copyright (c) 2007 Christian Bach\n* fork maintained by Rob Garrison\n*\n* Examples and original docs at: http://tablesorter.com\n* Dual licensed under the MIT and GPL licenses:\n* http://www.opensource.org/licenses/mit-license.php\n* http://www.gnu.org/licenses/gpl.html\n*\n* @type jQuery\n* @name tablesorter (FORK)\n* @cat Plugins/Tablesorter\n* @author Christian Bach - christian.bach@polyester.se\n* @contributor Rob Garrison - https://github.com/Mottie/tablesorter\n* @docs (fork) - https://mottie.github.io/tablesorter/docs/\n*/\n    /*jshint browser:true, jquery:true, unused:false, expr: true */\n    ;( function( $ ) {\n        'use strict';\n        var ts = $.tablesorter = {\n\n            version : '2.31.3',\n\n            parsers : [],\n            widgets : [],\n            defaults : {\n\n                // *** appearance\n                theme            : 'default',  // adds tablesorter-{theme} to the table for styling\n                widthFixed       : false,      // adds colgroup to fix widths of columns\n                showProcessing   : false,      // show an indeterminate timer icon in the header when the table is sorted or filtered.\n\n                headerTemplate   : '{content}',// header layout template (HTML ok); {content} = innerHTML, {icon} = <i></i> // class from cssIcon\n                onRenderTemplate : null,       // function( index, template ) { return template; }, // template is a string\n                onRenderHeader   : null,       // function( index ) {}, // nothing to return\n\n                // *** functionality\n                cancelSelection  : true,       // prevent text selection in the header\n                tabIndex         : true,       // add tabindex to header for keyboard accessibility\n                dateFormat       : 'mmddyyyy', // other options: 'ddmmyyy' or 'yyyymmdd'\n                sortMultiSortKey : 'shiftKey', // key used to select additional columns\n                sortResetKey     : 'ctrlKey',  // key used to remove sorting on a column\n                usNumberFormat   : true,       // false for German '1.234.567,89' or French '1 234 567,89'\n                delayInit        : false,      // if false, the parsed table contents will not update until the first sort\n                serverSideSorting: false,      // if true, server-side sorting should be performed because client-side sorting will be disabled, but the ui and events will still be used.\n                resort           : true,       // default setting to trigger a resort after an 'update', 'addRows', 'updateCell', etc has completed\n\n                // *** sort options\n                headers          : {},         // set sorter, string, empty, locked order, sortInitialOrder, filter, etc.\n                ignoreCase       : true,       // ignore case while sorting\n                sortForce        : null,       // column(s) first sorted; always applied\n                sortList         : [],         // Initial sort order; applied initially; updated when manually sorted\n                sortAppend       : null,       // column(s) sorted last; always applied\n                sortStable       : false,      // when sorting two rows with exactly the same content, the original sort order is maintained\n\n                sortInitialOrder : 'asc',      // sort direction on first click\n                sortLocaleCompare: false,      // replace equivalent character (accented characters)\n                sortReset        : false,      // third click on the header will reset column to default - unsorted\n                sortRestart      : false,      // restart sort to 'sortInitialOrder' when clicking on previously unsorted columns\n\n                emptyTo          : 'bottom',   // sort empty cell to bottom, top, none, zero, emptyMax, emptyMin\n                stringTo         : 'max',      // sort strings in numerical column as max, min, top, bottom, zero\n                duplicateSpan    : true,       // colspan cells in the tbody will have duplicated content in the cache for each spanned column\n                textExtraction   : 'basic',    // text extraction method/function - function( node, table, cellIndex ) {}\n                textAttribute    : 'data-text',// data-attribute that contains alternate cell text (used in default textExtraction function)\n                textSorter       : null,       // choose overall or specific column sorter function( a, b, direction, table, columnIndex ) [alt: ts.sortText]\n                numberSorter     : null,       // choose overall numeric sorter function( a, b, direction, maxColumnValue )\n\n                // *** widget options\n                initWidgets      : true,       // apply widgets on tablesorter initialization\n                widgetClass      : 'widget-{name}', // table class name template to match to include a widget\n                widgets          : [],         // method to add widgets, e.g. widgets: ['zebra']\n                widgetOptions    : {\n                    zebra : [ 'even', 'odd' ]  // zebra widget alternating row class names\n                },\n\n                // *** callbacks\n                initialized      : null,       // function( table ) {},\n\n                // *** extra css class names\n                tableClass       : '',\n                cssAsc           : '',\n                cssDesc          : '',\n                cssNone          : '',\n                cssHeader        : '',\n                cssHeaderRow     : '',\n                cssProcessing    : '', // processing icon applied to header during sort/filter\n\n                cssChildRow      : 'tablesorter-childRow', // class name indiciating that a row is to be attached to its parent\n                cssInfoBlock     : 'tablesorter-infoOnly', // don't sort tbody with this class name (only one class name allowed here!)\n                cssNoSort        : 'tablesorter-noSort',   // class name added to element inside header; clicking on it won't cause a sort\n                cssIgnoreRow     : 'tablesorter-ignoreRow',// header row to ignore; cells within this row will not be added to c.$headers\n\n                cssIcon          : 'tablesorter-icon', // if this class does not exist, the {icon} will not be added from the headerTemplate\n                cssIconNone      : '', // class name added to the icon when there is no column sort\n                cssIconAsc       : '', // class name added to the icon when the column has an ascending sort\n                cssIconDesc      : '', // class name added to the icon when the column has a descending sort\n                cssIconDisabled  : '', // class name added to the icon when the column has a disabled sort\n\n                // *** events\n                pointerClick     : 'click',\n                pointerDown      : 'mousedown',\n                pointerUp        : 'mouseup',\n\n                // *** selectors\n                selectorHeaders  : '> thead th, > thead td',\n                selectorSort     : 'th, td', // jQuery selector of content within selectorHeaders that is clickable to trigger a sort\n                selectorRemove   : '.remove-me',\n\n                // *** advanced\n                debug            : false,\n\n                // *** Internal variables\n                headerList: [],\n                empties: {},\n                strings: {},\n                parsers: [],\n\n                // *** parser options for validator; values must be falsy!\n                globalize: 0,\n                imgAttr: 0\n\n                // removed: widgetZebra: { css: ['even', 'odd'] }\n\n            },\n\n            // internal css classes - these will ALWAYS be added to\n            // the table and MUST only contain one class name - fixes #381\n            css : {\n                table      : 'tablesorter',\n                cssHasChild: 'tablesorter-hasChildRow',\n                childRow   : 'tablesorter-childRow',\n                colgroup   : 'tablesorter-colgroup',\n                header     : 'tablesorter-header',\n                headerRow  : 'tablesorter-headerRow',\n                headerIn   : 'tablesorter-header-inner',\n                icon       : 'tablesorter-icon',\n                processing : 'tablesorter-processing',\n                sortAsc    : 'tablesorter-headerAsc',\n                sortDesc   : 'tablesorter-headerDesc',\n                sortNone   : 'tablesorter-headerUnSorted'\n            },\n\n            // labels applied to sortable headers for accessibility (aria) support\n            language : {\n                sortAsc      : 'Ascending sort applied, ',\n                sortDesc     : 'Descending sort applied, ',\n                sortNone     : 'No sort applied, ',\n                sortDisabled : 'sorting is disabled',\n                nextAsc      : 'activate to apply an ascending sort',\n                nextDesc     : 'activate to apply a descending sort',\n                nextNone     : 'activate to remove the sort'\n            },\n\n            regex : {\n                templateContent : /\\{content\\}/g,\n                templateIcon    : /\\{icon\\}/g,\n                templateName    : /\\{name\\}/i,\n                spaces          : /\\s+/g,\n                nonWord         : /\\W/g,\n                formElements    : /(input|select|button|textarea)/i,\n\n                // *** sort functions ***\n                // regex used in natural sort\n                // chunk/tokenize numbers & letters\n                chunk  : /(^([+\\-]?(?:\\d*)(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)?$|^0x[0-9a-f]+$|\\d+)/gi,\n                // replace chunks @ ends\n                chunks : /(^\\\\0|\\\\0$)/,\n                hex    : /^0x[0-9a-f]+$/i,\n\n                // *** formatFloat ***\n                comma                : /,/g,\n                digitNonUS           : /[\\s|\\.]/g,\n                digitNegativeTest    : /^\\s*\\([.\\d]+\\)/,\n                digitNegativeReplace : /^\\s*\\(([.\\d]+)\\)/,\n\n                // *** isDigit ***\n                digitTest    : /^[\\-+(]?\\d+[)]?$/,\n                digitReplace : /[,.'\"\\s]/g\n\n            },\n\n            // digit sort, text location\n            string : {\n                max      : 1,\n                min      : -1,\n                emptymin : 1,\n                emptymax : -1,\n                zero     : 0,\n                none     : 0,\n                'null'   : 0,\n                top      : true,\n                bottom   : false\n            },\n\n            keyCodes : {\n                enter : 13\n            },\n\n            // placeholder date parser data (globalize)\n            dates : {},\n\n            // These methods can be applied on table.config instance\n            instanceMethods : {},\n\n            /*\n            ▄█████ ██████ ██████ ██  ██ █████▄\n            ▀█▄    ██▄▄     ██   ██  ██ ██▄▄██\n               ▀█▄ ██▀▀     ██   ██  ██ ██▀▀▀\n            █████▀ ██████   ██   ▀████▀ ██\n            */\n\n            setup : function( table, c ) {\n                // if no thead or tbody, or tablesorter is already present, quit\n                if ( !table || !table.tHead || table.tBodies.length === 0 || table.hasInitialized === true ) {\n                    if ( ts.debug(c, 'core') ) {\n                        if ( table.hasInitialized ) {\n                            console.warn( 'Stopping initialization. Tablesorter has already been initialized' );\n                        } else {\n                            console.error( 'Stopping initialization! No table, thead or tbody', table );\n                        }\n                    }\n                    return;\n                }\n\n                var tmp = '',\n                    $table = $( table ),\n                    meta = $.metadata;\n                // initialization flag\n                table.hasInitialized = false;\n                // table is being processed flag\n                table.isProcessing = true;\n                // make sure to store the config object\n                table.config = c;\n                // save the settings where they read\n                $.data( table, 'tablesorter', c );\n                if ( ts.debug(c, 'core') ) {\n                    console[ console.group ? 'group' : 'log' ]( 'Initializing tablesorter v' + ts.version );\n                    $.data( table, 'startoveralltimer', new Date() );\n                }\n\n                // removing this in version 3 (only supports jQuery 1.7+)\n                c.supportsDataObject = ( function( version ) {\n                    version[ 0 ] = parseInt( version[ 0 ], 10 );\n                    return ( version[ 0 ] > 1 ) || ( version[ 0 ] === 1 && parseInt( version[ 1 ], 10 ) >= 4 );\n                })( $.fn.jquery.split( '.' ) );\n                // ensure case insensitivity\n                c.emptyTo = c.emptyTo.toLowerCase();\n                c.stringTo = c.stringTo.toLowerCase();\n                c.last = { sortList : [], clickedIndex : -1 };\n                // add table theme class only if there isn't already one there\n                if ( !/tablesorter\\-/.test( $table.attr( 'class' ) ) ) {\n                    tmp = ( c.theme !== '' ? ' tablesorter-' + c.theme : '' );\n                }\n\n                // give the table a unique id, which will be used in namespace binding\n                if ( !c.namespace ) {\n                    c.namespace = '.tablesorter' + Math.random().toString( 16 ).slice( 2 );\n                } else {\n                    // make sure namespace starts with a period & doesn't have weird characters\n                    c.namespace = '.' + c.namespace.replace( ts.regex.nonWord, '' );\n                }\n\n                c.table = table;\n                c.$table = $table\n                    // add namespace to table to allow bindings on extra elements to target\n                    // the parent table (e.g. parser-input-select)\n                    .addClass( ts.css.table + ' ' + c.tableClass + tmp + ' ' + c.namespace.slice(1) )\n                    .attr( 'role', 'grid' );\n                c.$headers = $table.find( c.selectorHeaders );\n\n                c.$table.children().children( 'tr' ).attr( 'role', 'row' );\n                c.$tbodies = $table.children( 'tbody:not(.' + c.cssInfoBlock + ')' ).attr({\n                    'aria-live' : 'polite',\n                    'aria-relevant' : 'all'\n                });\n                if ( c.$table.children( 'caption' ).length ) {\n                    tmp = c.$table.children( 'caption' )[ 0 ];\n                    if ( !tmp.id ) { tmp.id = c.namespace.slice( 1 ) + 'caption'; }\n                    c.$table.attr( 'aria-labelledby', tmp.id );\n                }\n                c.widgetInit = {}; // keep a list of initialized widgets\n                // change textExtraction via data-attribute\n                c.textExtraction = c.$table.attr( 'data-text-extraction' ) || c.textExtraction || 'basic';\n                // build headers\n                ts.buildHeaders( c );\n                // fixate columns if the users supplies the fixedWidth option\n                // do this after theme has been applied\n                ts.fixColumnWidth( table );\n                // add widgets from class name\n                ts.addWidgetFromClass( table );\n                // add widget options before parsing (e.g. grouping widget has parser settings)\n                ts.applyWidgetOptions( table );\n                // try to auto detect column type, and store in tables config\n                ts.setupParsers( c );\n                // start total row count at zero\n                c.totalRows = 0;\n                // only validate options while debugging. See #1528\n                if (c.debug) {\n                    ts.validateOptions( c );\n                }\n                // build the cache for the tbody cells\n                // delayInit will delay building the cache until the user starts a sort\n                if ( !c.delayInit ) { ts.buildCache( c ); }\n                // bind all header events and methods\n                ts.bindEvents( table, c.$headers, true );\n                ts.bindMethods( c );\n                // get sort list from jQuery data or metadata\n                // in jQuery < 1.4, an error occurs when calling $table.data()\n                if ( c.supportsDataObject && typeof $table.data().sortlist !== 'undefined' ) {\n                    c.sortList = $table.data().sortlist;\n                } else if ( meta && ( $table.metadata() && $table.metadata().sortlist ) ) {\n                    c.sortList = $table.metadata().sortlist;\n                }\n                // apply widget init code\n                ts.applyWidget( table, true );\n                // if user has supplied a sort list to constructor\n                if ( c.sortList.length > 0 ) {\n                    // save sortList before any sortAppend is added\n                    c.last.sortList = c.sortList;\n                    ts.sortOn( c, c.sortList, {}, !c.initWidgets );\n                } else {\n                    ts.setHeadersCss( c );\n                    if ( c.initWidgets ) {\n                        // apply widget format\n                        ts.applyWidget( table, false );\n                    }\n                }\n\n                // show processesing icon\n                if ( c.showProcessing ) {\n                    $table\n                        .unbind( 'sortBegin' + c.namespace + ' sortEnd' + c.namespace )\n                        .bind( 'sortBegin' + c.namespace + ' sortEnd' + c.namespace, function( e ) {\n                            clearTimeout( c.timerProcessing );\n                            ts.isProcessing( table );\n                            if ( e.type === 'sortBegin' ) {\n                                c.timerProcessing = setTimeout( function() {\n                                    ts.isProcessing( table, true );\n                                }, 500 );\n                            }\n                        });\n                }\n\n                // initialized\n                table.hasInitialized = true;\n                table.isProcessing = false;\n                if ( ts.debug(c, 'core') ) {\n                    console.log( 'Overall initialization time:' + ts.benchmark( $.data( table, 'startoveralltimer' ) ) );\n                    if ( ts.debug(c, 'core') && console.groupEnd ) { console.groupEnd(); }\n                }\n                $table.triggerHandler( 'tablesorter-initialized', table );\n                if ( typeof c.initialized === 'function' ) {\n                    c.initialized( table );\n                }\n            },\n\n            bindMethods : function( c ) {\n                var $table = c.$table,\n                    namespace = c.namespace,\n                    events = ( 'sortReset update updateRows updateAll updateHeaders addRows updateCell updateComplete ' +\n                        'sorton appendCache updateCache applyWidgetId applyWidgets refreshWidgets destroy mouseup ' +\n                        'mouseleave ' ).split( ' ' )\n                        .join( namespace + ' ' );\n                // apply easy methods that trigger bound events\n                $table\n                    .unbind( events.replace( ts.regex.spaces, ' ' ) )\n                    .bind( 'sortReset' + namespace, function( e, callback ) {\n                        e.stopPropagation();\n                        // using this.config to ensure functions are getting a non-cached version of the config\n                        ts.sortReset( this.config, function( table ) {\n                            if (table.isApplyingWidgets) {\n                                // multiple triggers in a row... filterReset, then sortReset - see #1361\n                                // wait to update widgets\n                                setTimeout( function() {\n                                    ts.applyWidget( table, '', callback );\n                                }, 100 );\n                            } else {\n                                ts.applyWidget( table, '', callback );\n                            }\n                        });\n                    })\n                    .bind( 'updateAll' + namespace, function( e, resort, callback ) {\n                        e.stopPropagation();\n                        ts.updateAll( this.config, resort, callback );\n                    })\n                    .bind( 'update' + namespace + ' updateRows' + namespace, function( e, resort, callback ) {\n                        e.stopPropagation();\n                        ts.update( this.config, resort, callback );\n                    })\n                    .bind( 'updateHeaders' + namespace, function( e, callback ) {\n                        e.stopPropagation();\n                        ts.updateHeaders( this.config, callback );\n                    })\n                    .bind( 'updateCell' + namespace, function( e, cell, resort, callback ) {\n                        e.stopPropagation();\n                        ts.updateCell( this.config, cell, resort, callback );\n                    })\n                    .bind( 'addRows' + namespace, function( e, $row, resort, callback ) {\n                        e.stopPropagation();\n                        ts.addRows( this.config, $row, resort, callback );\n                    })\n                    .bind( 'updateComplete' + namespace, function() {\n                        this.isUpdating = false;\n                    })\n                    .bind( 'sorton' + namespace, function( e, list, callback, init ) {\n                        e.stopPropagation();\n                        ts.sortOn( this.config, list, callback, init );\n                    })\n                    .bind( 'appendCache' + namespace, function( e, callback, init ) {\n                        e.stopPropagation();\n                        ts.appendCache( this.config, init );\n                        if ( $.isFunction( callback ) ) {\n                            callback( this );\n                        }\n                    })\n                    // $tbodies variable is used by the tbody sorting widget\n                    .bind( 'updateCache' + namespace, function( e, callback, $tbodies ) {\n                        e.stopPropagation();\n                        ts.updateCache( this.config, callback, $tbodies );\n                    })\n                    .bind( 'applyWidgetId' + namespace, function( e, id ) {\n                        e.stopPropagation();\n                        ts.applyWidgetId( this, id );\n                    })\n                    .bind( 'applyWidgets' + namespace, function( e, callback ) {\n                        e.stopPropagation();\n                        // apply widgets (false = not initializing)\n                        ts.applyWidget( this, false, callback );\n                    })\n                    .bind( 'refreshWidgets' + namespace, function( e, all, dontapply ) {\n                        e.stopPropagation();\n                        ts.refreshWidgets( this, all, dontapply );\n                    })\n                    .bind( 'removeWidget' + namespace, function( e, name, refreshing ) {\n                        e.stopPropagation();\n                        ts.removeWidget( this, name, refreshing );\n                    })\n                    .bind( 'destroy' + namespace, function( e, removeClasses, callback ) {\n                        e.stopPropagation();\n                        ts.destroy( this, removeClasses, callback );\n                    })\n                    .bind( 'resetToLoadState' + namespace, function( e ) {\n                        e.stopPropagation();\n                        // remove all widgets\n                        ts.removeWidget( this, true, false );\n                        var tmp = $.extend( true, {}, c.originalSettings );\n                        // restore original settings; this clears out current settings, but does not clear\n                        // values saved to storage.\n                        c = $.extend( true, {}, ts.defaults, tmp );\n                        c.originalSettings = tmp;\n                        this.hasInitialized = false;\n                        // setup the entire table again\n                        ts.setup( this, c );\n                    });\n            },\n\n            bindEvents : function( table, $headers, core ) {\n                table = $( table )[ 0 ];\n                var tmp,\n                    c = table.config,\n                    namespace = c.namespace,\n                    downTarget = null;\n                if ( core !== true ) {\n                    $headers.addClass( namespace.slice( 1 ) + '_extra_headers' );\n                    tmp = ts.getClosest( $headers, 'table' );\n                    if ( tmp.length && tmp[ 0 ].nodeName === 'TABLE' && tmp[ 0 ] !== table ) {\n                        $( tmp[ 0 ] ).addClass( namespace.slice( 1 ) + '_extra_table' );\n                    }\n                }\n                tmp = ( c.pointerDown + ' ' + c.pointerUp + ' ' + c.pointerClick + ' sort keyup ' )\n                    .replace( ts.regex.spaces, ' ' )\n                    .split( ' ' )\n                    .join( namespace + ' ' );\n                // apply event handling to headers and/or additional headers (stickyheaders, scroller, etc)\n                $headers\n                    // http://stackoverflow.com/questions/5312849/jquery-find-self;\n                    .find( c.selectorSort )\n                    .add( $headers.filter( c.selectorSort ) )\n                    .unbind( tmp )\n                    .bind( tmp, function( e, external ) {\n                        var $cell, cell, temp,\n                            $target = $( e.target ),\n                            // wrap event type in spaces, so the match doesn't trigger on inner words\n                            type = ' ' + e.type + ' ';\n                        // only recognize left clicks\n                        if ( ( ( e.which || e.button ) !== 1 && !type.match( ' ' + c.pointerClick + ' | sort | keyup ' ) ) ||\n                            // allow pressing enter\n                            ( type === ' keyup ' && e.which !== ts.keyCodes.enter ) ||\n                            // allow triggering a click event (e.which is undefined) & ignore physical clicks\n                            ( type.match( ' ' + c.pointerClick + ' ' ) && typeof e.which !== 'undefined' ) ) {\n                            return;\n                        }\n                        // ignore mouseup if mousedown wasn't on the same target\n                        if ( type.match( ' ' + c.pointerUp + ' ' ) && downTarget !== e.target && external !== true ) {\n                            return;\n                        }\n                        // set target on mousedown\n                        if ( type.match( ' ' + c.pointerDown + ' ' ) ) {\n                            downTarget = e.target;\n                            // preventDefault needed or jQuery v1.3.2 and older throws an\n                            // \"Uncaught TypeError: handler.apply is not a function\" error\n                            temp = $target.jquery.split( '.' );\n                            if ( temp[ 0 ] === '1' && temp[ 1 ] < 4 ) { e.preventDefault(); }\n                            return;\n                        }\n                        downTarget = null;\n                        $cell = ts.getClosest( $( this ), '.' + ts.css.header );\n                        // prevent sort being triggered on form elements\n                        if ( ts.regex.formElements.test( e.target.nodeName ) ||\n                            // nosort class name, or elements within a nosort container\n                            $target.hasClass( c.cssNoSort ) || $target.parents( '.' + c.cssNoSort ).length > 0 ||\n                            // disabled cell directly clicked\n                            $cell.hasClass( 'sorter-false' ) ||\n                            // elements within a button\n                            $target.parents( 'button' ).length > 0 ) {\n                            return !c.cancelSelection;\n                        }\n                        if ( c.delayInit && ts.isEmptyObject( c.cache ) ) {\n                            ts.buildCache( c );\n                        }\n                        // use column index from data-attribute or index of current row; fixes #1116\n                        c.last.clickedIndex = $cell.attr( 'data-column' ) || $cell.index();\n                        cell = c.$headerIndexed[ c.last.clickedIndex ][0];\n                        if ( cell && !cell.sortDisabled ) {\n                            ts.initSort( c, cell, e );\n                        }\n                    });\n                if ( c.cancelSelection ) {\n                    // cancel selection\n                    $headers\n                        .attr( 'unselectable', 'on' )\n                        .bind( 'selectstart', false )\n                        .css({\n                            'user-select' : 'none',\n                            'MozUserSelect' : 'none' // not needed for jQuery 1.8+\n                        });\n                }\n            },\n\n            buildHeaders : function( c ) {\n                var $temp, icon, timer, indx;\n                c.headerList = [];\n                c.headerContent = [];\n                c.sortVars = [];\n                if ( ts.debug(c, 'core') ) {\n                    timer = new Date();\n                }\n                // children tr in tfoot - see issue #196 & #547\n                // don't pass table.config to computeColumnIndex here - widgets (math) pass it to \"quickly\" index tbody cells\n                c.columns = ts.computeColumnIndex( c.$table.children( 'thead, tfoot' ).children( 'tr' ) );\n                // add icon if cssIcon option exists\n                icon = c.cssIcon ?\n                    '<i class=\"' + ( c.cssIcon === ts.css.icon ? ts.css.icon : c.cssIcon + ' ' + ts.css.icon ) + '\"></i>' :\n                    '';\n                // redefine c.$headers here in case of an updateAll that replaces or adds an entire header cell - see #683\n                c.$headers = $( $.map( c.$table.find( c.selectorHeaders ), function( elem, index ) {\n                    var configHeaders, header, column, template, tmp,\n                        $elem = $( elem );\n                    // ignore cell (don't add it to c.$headers) if row has ignoreRow class\n                    if ( ts.getClosest( $elem, 'tr' ).hasClass( c.cssIgnoreRow ) ) { return; }\n                    // transfer data-column to element if not th/td - #1459\n                    if ( !/(th|td)/i.test( elem.nodeName ) ) {\n                        tmp = ts.getClosest( $elem, 'th, td' );\n                        $elem.attr( 'data-column', tmp.attr( 'data-column' ) );\n                    }\n                    // make sure to get header cell & not column indexed cell\n                    configHeaders = ts.getColumnData( c.table, c.headers, index, true );\n                    // save original header content\n                    c.headerContent[ index ] = $elem.html();\n                    // if headerTemplate is empty, don't reformat the header cell\n                    if ( c.headerTemplate !== '' && !$elem.find( '.' + ts.css.headerIn ).length ) {\n                        // set up header template\n                        template = c.headerTemplate\n                            .replace( ts.regex.templateContent, $elem.html() )\n                            .replace( ts.regex.templateIcon, $elem.find( '.' + ts.css.icon ).length ? '' : icon );\n                        if ( c.onRenderTemplate ) {\n                            header = c.onRenderTemplate.apply( $elem, [ index, template ] );\n                            // only change t if something is returned\n                            if ( header && typeof header === 'string' ) {\n                                template = header;\n                            }\n                        }\n                        $elem.html( '<div class=\"' + ts.css.headerIn + '\">' + template + '</div>' ); // faster than wrapInner\n                    }\n                    if ( c.onRenderHeader ) {\n                        c.onRenderHeader.apply( $elem, [ index, c, c.$table ] );\n                    }\n                    column = parseInt( $elem.attr( 'data-column' ), 10 );\n                    elem.column = column;\n                    tmp = ts.getOrder( ts.getData( $elem, configHeaders, 'sortInitialOrder' ) || c.sortInitialOrder );\n                    // this may get updated numerous times if there are multiple rows\n                    c.sortVars[ column ] = {\n                        count : -1, // set to -1 because clicking on the header automatically adds one\n                        order : tmp ?\n                            ( c.sortReset ? [ 1, 0, 2 ] : [ 1, 0 ] ) : // desc, asc, unsorted\n                            ( c.sortReset ? [ 0, 1, 2 ] : [ 0, 1 ] ),  // asc, desc, unsorted\n                        lockedOrder : false,\n                        sortedBy : ''\n                    };\n                    tmp = ts.getData( $elem, configHeaders, 'lockedOrder' ) || false;\n                    if ( typeof tmp !== 'undefined' && tmp !== false ) {\n                        c.sortVars[ column ].lockedOrder = true;\n                        c.sortVars[ column ].order = ts.getOrder( tmp ) ? [ 1, 1 ] : [ 0, 0 ];\n                    }\n                    // add cell to headerList\n                    c.headerList[ index ] = elem;\n                    $elem.addClass( ts.css.header + ' ' + c.cssHeader );\n                    // add to parent in case there are multiple rows\n                    ts.getClosest( $elem, 'tr' )\n                        .addClass( ts.css.headerRow + ' ' + c.cssHeaderRow )\n                        .attr( 'role', 'row' );\n                    // allow keyboard cursor to focus on element\n                    if ( c.tabIndex ) {\n                        $elem.attr( 'tabindex', 0 );\n                    }\n                    return elem;\n                }) );\n                // cache headers per column\n                c.$headerIndexed = [];\n                for ( indx = 0; indx < c.columns; indx++ ) {\n                    // colspan in header making a column undefined\n                    if ( ts.isEmptyObject( c.sortVars[ indx ] ) ) {\n                        c.sortVars[ indx ] = {};\n                    }\n                    // Use c.$headers.parent() in case selectorHeaders doesn't point to the th/td\n                    $temp = c.$headers.filter( '[data-column=\"' + indx + '\"]' );\n                    // target sortable column cells, unless there are none, then use non-sortable cells\n                    // .last() added in jQuery 1.4; use .filter(':last') to maintain compatibility with jQuery v1.2.6\n                    c.$headerIndexed[ indx ] = $temp.length ?\n                        $temp.not( '.sorter-false' ).length ?\n                            $temp.not( '.sorter-false' ).filter( ':last' ) :\n                            $temp.filter( ':last' ) :\n                        $();\n                }\n                c.$table.find( c.selectorHeaders ).attr({\n                    scope: 'col',\n                    role : 'columnheader'\n                });\n                // enable/disable sorting\n                ts.updateHeader( c );\n                if ( ts.debug(c, 'core') ) {\n                    console.log( 'Built headers:' + ts.benchmark( timer ) );\n                    console.log( c.$headers );\n                }\n            },\n\n            // Use it to add a set of methods to table.config which will be available for all tables.\n            // This should be done before table initialization\n            addInstanceMethods : function( methods ) {\n                $.extend( ts.instanceMethods, methods );\n            },\n\n            /*\n            █████▄ ▄████▄ █████▄ ▄█████ ██████ █████▄ ▄█████\n            ██▄▄██ ██▄▄██ ██▄▄██ ▀█▄    ██▄▄   ██▄▄██ ▀█▄\n            ██▀▀▀  ██▀▀██ ██▀██     ▀█▄ ██▀▀   ██▀██     ▀█▄\n            ██     ██  ██ ██  ██ █████▀ ██████ ██  ██ █████▀\n            */\n            setupParsers : function( c, $tbodies ) {\n                var rows, list, span, max, colIndex, indx, header, configHeaders,\n                    noParser, parser, extractor, time, tbody, len,\n                    table = c.table,\n                    tbodyIndex = 0,\n                    debug = ts.debug(c, 'core'),\n                    debugOutput = {};\n                // update table bodies in case we start with an empty table\n                c.$tbodies = c.$table.children( 'tbody:not(.' + c.cssInfoBlock + ')' );\n                tbody = typeof $tbodies === 'undefined' ? c.$tbodies : $tbodies;\n                len = tbody.length;\n                if ( len === 0 ) {\n                    return debug ? console.warn( 'Warning: *Empty table!* Not building a parser cache' ) : '';\n                } else if ( debug ) {\n                    time = new Date();\n                    console[ console.group ? 'group' : 'log' ]( 'Detecting parsers for each column' );\n                }\n                list = {\n                    extractors: [],\n                    parsers: []\n                };\n                while ( tbodyIndex < len ) {\n                    rows = tbody[ tbodyIndex ].rows;\n                    if ( rows.length ) {\n                        colIndex = 0;\n                        max = c.columns;\n                        for ( indx = 0; indx < max; indx++ ) {\n                            header = c.$headerIndexed[ colIndex ];\n                            if ( header && header.length ) {\n                                // get column indexed table cell; adding true parameter fixes #1362 but\n                                // it would break backwards compatibility...\n                                configHeaders = ts.getColumnData( table, c.headers, colIndex ); // , true );\n                                // get column parser/extractor\n                                extractor = ts.getParserById( ts.getData( header, configHeaders, 'extractor' ) );\n                                parser = ts.getParserById( ts.getData( header, configHeaders, 'sorter' ) );\n                                noParser = ts.getData( header, configHeaders, 'parser' ) === 'false';\n                                // empty cells behaviour - keeping emptyToBottom for backwards compatibility\n                                c.empties[colIndex] = (\n                                    ts.getData( header, configHeaders, 'empty' ) ||\n                                    c.emptyTo || ( c.emptyToBottom ? 'bottom' : 'top' ) ).toLowerCase();\n                                // text strings behaviour in numerical sorts\n                                c.strings[colIndex] = (\n                                    ts.getData( header, configHeaders, 'string' ) ||\n                                    c.stringTo ||\n                                    'max' ).toLowerCase();\n                                if ( noParser ) {\n                                    parser = ts.getParserById( 'no-parser' );\n                                }\n                                if ( !extractor ) {\n                                    // For now, maybe detect someday\n                                    extractor = false;\n                                }\n                                if ( !parser ) {\n                                    parser = ts.detectParserForColumn( c, rows, -1, colIndex );\n                                }\n                                if ( debug ) {\n                                    debugOutput[ '(' + colIndex + ') ' + header.text() ] = {\n                                        parser : parser.id,\n                                        extractor : extractor ? extractor.id : 'none',\n                                        string : c.strings[ colIndex ],\n                                        empty  : c.empties[ colIndex ]\n                                    };\n                                }\n                                list.parsers[ colIndex ] = parser;\n                                list.extractors[ colIndex ] = extractor;\n                                span = header[ 0 ].colSpan - 1;\n                                if ( span > 0 ) {\n                                    colIndex += span;\n                                    max += span;\n                                    while ( span + 1 > 0 ) {\n                                        // set colspan columns to use the same parsers & extractors\n                                        list.parsers[ colIndex - span ] = parser;\n                                        list.extractors[ colIndex - span ] = extractor;\n                                        span--;\n                                    }\n                                }\n                            }\n                            colIndex++;\n                        }\n                    }\n                    tbodyIndex += ( list.parsers.length ) ? len : 1;\n                }\n                if ( debug ) {\n                    if ( !ts.isEmptyObject( debugOutput ) ) {\n                        console[ console.table ? 'table' : 'log' ]( debugOutput );\n                    } else {\n                        console.warn( '  No parsers detected!' );\n                    }\n                    console.log( 'Completed detecting parsers' + ts.benchmark( time ) );\n                    if ( console.groupEnd ) { console.groupEnd(); }\n                }\n                c.parsers = list.parsers;\n                c.extractors = list.extractors;\n            },\n\n            addParser : function( parser ) {\n                var indx,\n                    len = ts.parsers.length,\n                    add = true;\n                for ( indx = 0; indx < len; indx++ ) {\n                    if ( ts.parsers[ indx ].id.toLowerCase() === parser.id.toLowerCase() ) {\n                        add = false;\n                    }\n                }\n                if ( add ) {\n                    ts.parsers[ ts.parsers.length ] = parser;\n                }\n            },\n\n            getParserById : function( name ) {\n                /*jshint eqeqeq:false */ // eslint-disable-next-line eqeqeq\n                if ( name == 'false' ) { return false; }\n                var indx,\n                    len = ts.parsers.length;\n                for ( indx = 0; indx < len; indx++ ) {\n                    if ( ts.parsers[ indx ].id.toLowerCase() === ( name.toString() ).toLowerCase() ) {\n                        return ts.parsers[ indx ];\n                    }\n                }\n                return false;\n            },\n\n            detectParserForColumn : function( c, rows, rowIndex, cellIndex ) {\n                var cur, $node, row,\n                    indx = ts.parsers.length,\n                    node = false,\n                    nodeValue = '',\n                    debug = ts.debug(c, 'core'),\n                    keepLooking = true;\n                while ( nodeValue === '' && keepLooking ) {\n                    rowIndex++;\n                    row = rows[ rowIndex ];\n                    // stop looking after 50 empty rows\n                    if ( row && rowIndex < 50 ) {\n                        if ( row.className.indexOf( ts.cssIgnoreRow ) < 0 ) {\n                            node = rows[ rowIndex ].cells[ cellIndex ];\n                            nodeValue = ts.getElementText( c, node, cellIndex );\n                            $node = $( node );\n                            if ( debug ) {\n                                console.log( 'Checking if value was empty on row ' + rowIndex + ', column: ' +\n                                    cellIndex + ': \"' + nodeValue + '\"' );\n                            }\n                        }\n                    } else {\n                        keepLooking = false;\n                    }\n                }\n                while ( --indx >= 0 ) {\n                    cur = ts.parsers[ indx ];\n                    // ignore the default text parser because it will always be true\n                    if ( cur && cur.id !== 'text' && cur.is && cur.is( nodeValue, c.table, node, $node ) ) {\n                        return cur;\n                    }\n                }\n                // nothing found, return the generic parser (text)\n                return ts.getParserById( 'text' );\n            },\n\n            getElementText : function( c, node, cellIndex ) {\n                if ( !node ) { return ''; }\n                var tmp,\n                    extract = c.textExtraction || '',\n                    // node could be a jquery object\n                    // http://jsperf.com/jquery-vs-instanceof-jquery/2\n                    $node = node.jquery ? node : $( node );\n                if ( typeof extract === 'string' ) {\n                    // check data-attribute first when set to 'basic'; don't use node.innerText - it's really slow!\n                    // http://www.kellegous.com/j/2013/02/27/innertext-vs-textcontent/\n                    if ( extract === 'basic' && typeof ( tmp = $node.attr( c.textAttribute ) ) !== 'undefined' ) {\n                        return $.trim( tmp );\n                    }\n                    return $.trim( node.textContent || $node.text() );\n                } else {\n                    if ( typeof extract === 'function' ) {\n                        return $.trim( extract( $node[ 0 ], c.table, cellIndex ) );\n                    } else if ( typeof ( tmp = ts.getColumnData( c.table, extract, cellIndex ) ) === 'function' ) {\n                        return $.trim( tmp( $node[ 0 ], c.table, cellIndex ) );\n                    }\n                }\n                // fallback\n                return $.trim( $node[ 0 ].textContent || $node.text() );\n            },\n\n            // centralized function to extract/parse cell contents\n            getParsedText : function( c, cell, colIndex, txt ) {\n                if ( typeof txt === 'undefined' ) {\n                    txt = ts.getElementText( c, cell, colIndex );\n                }\n                // if no parser, make sure to return the txt\n                var val = '' + txt,\n                    parser = c.parsers[ colIndex ],\n                    extractor = c.extractors[ colIndex ];\n                if ( parser ) {\n                    // do extract before parsing, if there is one\n                    if ( extractor && typeof extractor.format === 'function' ) {\n                        txt = extractor.format( txt, c.table, cell, colIndex );\n                    }\n                    // allow parsing if the string is empty, previously parsing would change it to zero,\n                    // in case the parser needs to extract data from the table cell attributes\n                    val = parser.id === 'no-parser' ? '' :\n                        // make sure txt is a string (extractor may have converted it)\n                        parser.format( '' + txt, c.table, cell, colIndex );\n                    if ( c.ignoreCase && typeof val === 'string' ) {\n                        val = val.toLowerCase();\n                    }\n                }\n                return val;\n            },\n\n            /*\n            ▄████▄ ▄████▄ ▄████▄ ██  ██ ██████\n            ██  ▀▀ ██▄▄██ ██  ▀▀ ██▄▄██ ██▄▄\n            ██  ▄▄ ██▀▀██ ██  ▄▄ ██▀▀██ ██▀▀\n            ▀████▀ ██  ██ ▀████▀ ██  ██ ██████\n            */\n            buildCache : function( c, callback, $tbodies ) {\n                var cache, val, txt, rowIndex, colIndex, tbodyIndex, $tbody, $row,\n                    cols, $cells, cell, cacheTime, totalRows, rowData, prevRowData,\n                    colMax, span, cacheIndex, hasParser, max, len, index,\n                    table = c.table,\n                    parsers = c.parsers,\n                    debug = ts.debug(c, 'core');\n                // update tbody variable\n                c.$tbodies = c.$table.children( 'tbody:not(.' + c.cssInfoBlock + ')' );\n                $tbody = typeof $tbodies === 'undefined' ? c.$tbodies : $tbodies,\n                    c.cache = {};\n                c.totalRows = 0;\n                // if no parsers found, return - it's an empty table.\n                if ( !parsers ) {\n                    return debug ? console.warn( 'Warning: *Empty table!* Not building a cache' ) : '';\n                }\n                if ( debug ) {\n                    cacheTime = new Date();\n                }\n                // processing icon\n                if ( c.showProcessing ) {\n                    ts.isProcessing( table, true );\n                }\n                for ( tbodyIndex = 0; tbodyIndex < $tbody.length; tbodyIndex++ ) {\n                    colMax = []; // column max value per tbody\n                    cache = c.cache[ tbodyIndex ] = {\n                        normalized: [] // array of normalized row data; last entry contains 'rowData' above\n                        // colMax: #   // added at the end\n                    };\n\n                    totalRows = ( $tbody[ tbodyIndex ] && $tbody[ tbodyIndex ].rows.length ) || 0;\n                    for ( rowIndex = 0; rowIndex < totalRows; ++rowIndex ) {\n                        rowData = {\n                            // order: original row order #\n                            // $row : jQuery Object[]\n                            child: [], // child row text (filter widget)\n                            raw: []    // original row text\n                        };\n                        /** Add the table data to main data array */\n                        $row = $( $tbody[ tbodyIndex ].rows[ rowIndex ] );\n                        cols = [];\n                        // ignore \"remove-me\" rows\n                        if ( $row.hasClass( c.selectorRemove.slice(1) ) ) {\n                            continue;\n                        }\n                        // if this is a child row, add it to the last row's children and continue to the next row\n                        // ignore child row class, if it is the first row\n                        if ( $row.hasClass( c.cssChildRow ) && rowIndex !== 0 ) {\n                            len = cache.normalized.length - 1;\n                            prevRowData = cache.normalized[ len ][ c.columns ];\n                            prevRowData.$row = prevRowData.$row.add( $row );\n                            // add 'hasChild' class name to parent row\n                            if ( !$row.prev().hasClass( c.cssChildRow ) ) {\n                                $row.prev().addClass( ts.css.cssHasChild );\n                            }\n                            // save child row content (un-parsed!)\n                            $cells = $row.children( 'th, td' );\n                            len = prevRowData.child.length;\n                            prevRowData.child[ len ] = [];\n                            // child row content does not account for colspans/rowspans; so indexing may be off\n                            cacheIndex = 0;\n                            max = c.columns;\n                            for ( colIndex = 0; colIndex < max; colIndex++ ) {\n                                cell = $cells[ colIndex ];\n                                if ( cell ) {\n                                    prevRowData.child[ len ][ colIndex ] = ts.getParsedText( c, cell, colIndex );\n                                    span = $cells[ colIndex ].colSpan - 1;\n                                    if ( span > 0 ) {\n                                        cacheIndex += span;\n                                        max += span;\n                                    }\n                                }\n                                cacheIndex++;\n                            }\n                            // go to the next for loop\n                            continue;\n                        }\n                        rowData.$row = $row;\n                        rowData.order = rowIndex; // add original row position to rowCache\n                        cacheIndex = 0;\n                        max = c.columns;\n                        for ( colIndex = 0; colIndex < max; ++colIndex ) {\n                            cell = $row[ 0 ].cells[ colIndex ];\n                            if ( cell && cacheIndex < c.columns ) {\n                                hasParser = typeof parsers[ cacheIndex ] !== 'undefined';\n                                if ( !hasParser && debug ) {\n                                    console.warn( 'No parser found for row: ' + rowIndex + ', column: ' + colIndex +\n                                        '; cell containing: \"' + $(cell).text() + '\"; does it have a header?' );\n                                }\n                                val = ts.getElementText( c, cell, cacheIndex );\n                                rowData.raw[ cacheIndex ] = val; // save original row text\n                                // save raw column text even if there is no parser set\n                                txt = ts.getParsedText( c, cell, cacheIndex, val );\n                                cols[ cacheIndex ] = txt;\n                                if ( hasParser && ( parsers[ cacheIndex ].type || '' ).toLowerCase() === 'numeric' ) {\n                                    // determine column max value (ignore sign)\n                                    colMax[ cacheIndex ] = Math.max( Math.abs( txt ) || 0, colMax[ cacheIndex ] || 0 );\n                                }\n                                // allow colSpan in tbody\n                                span = cell.colSpan - 1;\n                                if ( span > 0 ) {\n                                    index = 0;\n                                    while ( index <= span ) {\n                                        // duplicate text (or not) to spanned columns\n                                        // instead of setting duplicate span to empty string, use textExtraction to try to get a value\n                                        // see http://stackoverflow.com/q/36449711/145346\n                                        txt = c.duplicateSpan || index === 0 ?\n                                            txt :\n                                            typeof c.textExtraction !== 'string' ?\n                                                ts.getElementText( c, cell, cacheIndex + index ) || '' :\n                                                '';\n                                        rowData.raw[ cacheIndex + index ] = txt;\n                                        cols[ cacheIndex + index ] = txt;\n                                        index++;\n                                    }\n                                    cacheIndex += span;\n                                    max += span;\n                                }\n                            }\n                            cacheIndex++;\n                        }\n                        // ensure rowData is always in the same location (after the last column)\n                        cols[ c.columns ] = rowData;\n                        cache.normalized[ cache.normalized.length ] = cols;\n                    }\n                    cache.colMax = colMax;\n                    // total up rows, not including child rows\n                    c.totalRows += cache.normalized.length;\n\n                }\n                if ( c.showProcessing ) {\n                    ts.isProcessing( table ); // remove processing icon\n                }\n                if ( debug ) {\n                    len = Math.min( 5, c.cache[ 0 ].normalized.length );\n                    console[ console.group ? 'group' : 'log' ]( 'Building cache for ' + c.totalRows +\n                        ' rows (showing ' + len + ' rows in log) and ' + c.columns + ' columns' +\n                        ts.benchmark( cacheTime ) );\n                    val = {};\n                    for ( colIndex = 0; colIndex < c.columns; colIndex++ ) {\n                        for ( cacheIndex = 0; cacheIndex < len; cacheIndex++ ) {\n                            if ( !val[ 'row: ' + cacheIndex ] ) {\n                                val[ 'row: ' + cacheIndex ] = {};\n                            }\n                            val[ 'row: ' + cacheIndex ][ c.$headerIndexed[ colIndex ].text() ] =\n                                c.cache[ 0 ].normalized[ cacheIndex ][ colIndex ];\n                        }\n                    }\n                    console[ console.table ? 'table' : 'log' ]( val );\n                    if ( console.groupEnd ) { console.groupEnd(); }\n                }\n                if ( $.isFunction( callback ) ) {\n                    callback( table );\n                }\n            },\n\n            getColumnText : function( table, column, callback, rowFilter ) {\n                table = $( table )[0];\n                var tbodyIndex, rowIndex, cache, row, tbodyLen, rowLen, raw, parsed, $cell, result,\n                    hasCallback = typeof callback === 'function',\n                    allColumns = column === 'all',\n                    data = { raw : [], parsed: [], $cell: [] },\n                    c = table.config;\n                if ( ts.isEmptyObject( c ) ) {\n                    if ( ts.debug(c, 'core') ) {\n                        console.warn( 'No cache found - aborting getColumnText function!' );\n                    }\n                } else {\n                    tbodyLen = c.$tbodies.length;\n                    for ( tbodyIndex = 0; tbodyIndex < tbodyLen; tbodyIndex++ ) {\n                        cache = c.cache[ tbodyIndex ].normalized;\n                        rowLen = cache.length;\n                        for ( rowIndex = 0; rowIndex < rowLen; rowIndex++ ) {\n                            row = cache[ rowIndex ];\n                            if ( rowFilter && !row[ c.columns ].$row.is( rowFilter ) ) {\n                                continue;\n                            }\n                            result = true;\n                            parsed = ( allColumns ) ? row.slice( 0, c.columns ) : row[ column ];\n                            row = row[ c.columns ];\n                            raw = ( allColumns ) ? row.raw : row.raw[ column ];\n                            $cell = ( allColumns ) ? row.$row.children() : row.$row.children().eq( column );\n                            if ( hasCallback ) {\n                                result = callback({\n                                    tbodyIndex : tbodyIndex,\n                                    rowIndex : rowIndex,\n                                    parsed : parsed,\n                                    raw : raw,\n                                    $row : row.$row,\n                                    $cell : $cell\n                                });\n                            }\n                            if ( result !== false ) {\n                                data.parsed[ data.parsed.length ] = parsed;\n                                data.raw[ data.raw.length ] = raw;\n                                data.$cell[ data.$cell.length ] = $cell;\n                            }\n                        }\n                    }\n                    // return everything\n                    return data;\n                }\n            },\n\n            /*\n            ██  ██ █████▄ █████▄ ▄████▄ ██████ ██████\n            ██  ██ ██▄▄██ ██  ██ ██▄▄██   ██   ██▄▄\n            ██  ██ ██▀▀▀  ██  ██ ██▀▀██   ██   ██▀▀\n            ▀████▀ ██     █████▀ ██  ██   ██   ██████\n            */\n            setHeadersCss : function( c ) {\n                var indx, column,\n                    list = c.sortList,\n                    len = list.length,\n                    none = ts.css.sortNone + ' ' + c.cssNone,\n                    css = [ ts.css.sortAsc + ' ' + c.cssAsc, ts.css.sortDesc + ' ' + c.cssDesc ],\n                    cssIcon = [ c.cssIconAsc, c.cssIconDesc, c.cssIconNone ],\n                    aria = [ 'ascending', 'descending' ],\n                    updateColumnSort = function($el, index) {\n                        $el\n                            .removeClass( none )\n                            .addClass( css[ index ] )\n                            .attr( 'aria-sort', aria[ index ] )\n                            .find( '.' + ts.css.icon )\n                            .removeClass( cssIcon[ 2 ] )\n                            .addClass( cssIcon[ index ] );\n                    },\n                    // find the footer\n                    $extras = c.$table\n                        .find( 'tfoot tr' )\n                        .children( 'td, th' )\n                        .add( $( c.namespace + '_extra_headers' ) )\n                        .removeClass( css.join( ' ' ) ),\n                    // remove all header information\n                    $sorted = c.$headers\n                        .add( $( 'thead ' + c.namespace + '_extra_headers' ) )\n                        .removeClass( css.join( ' ' ) )\n                        .addClass( none )\n                        .attr( 'aria-sort', 'none' )\n                        .find( '.' + ts.css.icon )\n                        .removeClass( cssIcon.join( ' ' ) )\n                        .end();\n                // add css none to all sortable headers\n                $sorted\n                    .not( '.sorter-false' )\n                    .find( '.' + ts.css.icon )\n                    .addClass( cssIcon[ 2 ] );\n                // add disabled css icon class\n                if ( c.cssIconDisabled ) {\n                    $sorted\n                        .filter( '.sorter-false' )\n                        .find( '.' + ts.css.icon )\n                        .addClass( c.cssIconDisabled );\n                }\n                for ( indx = 0; indx < len; indx++ ) {\n                    // direction = 2 means reset!\n                    if ( list[ indx ][ 1 ] !== 2 ) {\n                        // multicolumn sorting updating - see #1005\n                        // .not(function() {}) needs jQuery 1.4\n                        // filter(function(i, el) {}) <- el is undefined in jQuery v1.2.6\n                        $sorted = c.$headers.filter( function( i ) {\n                            // only include headers that are in the sortList (this includes colspans)\n                            var include = true,\n                                $el = c.$headers.eq( i ),\n                                col = parseInt( $el.attr( 'data-column' ), 10 ),\n                                end = col + ts.getClosest( $el, 'th, td' )[0].colSpan;\n                            for ( ; col < end; col++ ) {\n                                include = include ? include || ts.isValueInArray( col, c.sortList ) > -1 : false;\n                            }\n                            return include;\n                        });\n\n                        // choose the :last in case there are nested columns\n                        $sorted = $sorted\n                            .not( '.sorter-false' )\n                            .filter( '[data-column=\"' + list[ indx ][ 0 ] + '\"]' + ( len === 1 ? ':last' : '' ) );\n                        if ( $sorted.length ) {\n                            for ( column = 0; column < $sorted.length; column++ ) {\n                                if ( !$sorted[ column ].sortDisabled ) {\n                                    updateColumnSort( $sorted.eq( column ), list[ indx ][ 1 ] );\n                                }\n                            }\n                        }\n                        // add sorted class to footer & extra headers, if they exist\n                        if ( $extras.length ) {\n                            updateColumnSort( $extras.filter( '[data-column=\"' + list[ indx ][ 0 ] + '\"]' ), list[ indx ][ 1 ] );\n                        }\n                    }\n                }\n                // add verbose aria labels\n                len = c.$headers.length;\n                for ( indx = 0; indx < len; indx++ ) {\n                    ts.setColumnAriaLabel( c, c.$headers.eq( indx ) );\n                }\n            },\n\n            getClosest : function( $el, selector ) {\n                // jQuery v1.2.6 doesn't have closest()\n                if ( $.fn.closest ) {\n                    return $el.closest( selector );\n                }\n                return $el.is( selector ) ?\n                    $el :\n                    $el.parents( selector ).filter( ':first' );\n            },\n\n            // nextSort (optional), lets you disable next sort text\n            setColumnAriaLabel : function( c, $header, nextSort ) {\n                if ( $header.length ) {\n                    var column = parseInt( $header.attr( 'data-column' ), 10 ),\n                        vars = c.sortVars[ column ],\n                        tmp = $header.hasClass( ts.css.sortAsc ) ?\n                            'sortAsc' :\n                            $header.hasClass( ts.css.sortDesc ) ? 'sortDesc' : 'sortNone',\n                        txt = $.trim( $header.text() ) + ': ' + ts.language[ tmp ];\n                    if ( $header.hasClass( 'sorter-false' ) || nextSort === false ) {\n                        txt += ts.language.sortDisabled;\n                    } else {\n                        tmp = ( vars.count + 1 ) % vars.order.length;\n                        nextSort = vars.order[ tmp ];\n                        // if nextSort\n                        txt += ts.language[ nextSort === 0 ? 'nextAsc' : nextSort === 1 ? 'nextDesc' : 'nextNone' ];\n                    }\n                    $header.attr( 'aria-label', txt );\n                    if (vars.sortedBy) {\n                        $header.attr( 'data-sortedBy', vars.sortedBy );\n                    } else {\n                        $header.removeAttr('data-sortedBy');\n                    }\n                }\n            },\n\n            updateHeader : function( c ) {\n                var index, isDisabled, $header, col,\n                    table = c.table,\n                    len = c.$headers.length;\n                for ( index = 0; index < len; index++ ) {\n                    $header = c.$headers.eq( index );\n                    col = ts.getColumnData( table, c.headers, index, true );\n                    // add 'sorter-false' class if 'parser-false' is set\n                    isDisabled = ts.getData( $header, col, 'sorter' ) === 'false' || ts.getData( $header, col, 'parser' ) === 'false';\n                    ts.setColumnSort( c, $header, isDisabled );\n                }\n            },\n\n            setColumnSort : function( c, $header, isDisabled ) {\n                var id = c.table.id;\n                $header[ 0 ].sortDisabled = isDisabled;\n                $header[ isDisabled ? 'addClass' : 'removeClass' ]( 'sorter-false' )\n                    .attr( 'aria-disabled', '' + isDisabled );\n                // disable tab index on disabled cells\n                if ( c.tabIndex ) {\n                    if ( isDisabled ) {\n                        $header.removeAttr( 'tabindex' );\n                    } else {\n                        $header.attr( 'tabindex', '0' );\n                    }\n                }\n                // aria-controls - requires table ID\n                if ( id ) {\n                    if ( isDisabled ) {\n                        $header.removeAttr( 'aria-controls' );\n                    } else {\n                        $header.attr( 'aria-controls', id );\n                    }\n                }\n            },\n\n            updateHeaderSortCount : function( c, list ) {\n                var col, dir, group, indx, primary, temp, val, order,\n                    sortList = list || c.sortList,\n                    len = sortList.length;\n                c.sortList = [];\n                for ( indx = 0; indx < len; indx++ ) {\n                    val = sortList[ indx ];\n                    // ensure all sortList values are numeric - fixes #127\n                    col = parseInt( val[ 0 ], 10 );\n                    // prevents error if sorton array is wrong\n                    if ( col < c.columns ) {\n\n                        // set order if not already defined - due to colspan header without associated header cell\n                        // adding this check prevents a javascript error\n                        if ( !c.sortVars[ col ].order ) {\n                            if ( ts.getOrder( c.sortInitialOrder ) ) {\n                                order = c.sortReset ? [ 1, 0, 2 ] : [ 1, 0 ];\n                            } else {\n                                order = c.sortReset ? [ 0, 1, 2 ] : [ 0, 1 ];\n                            }\n                            c.sortVars[ col ].order = order;\n                            c.sortVars[ col ].count = 0;\n                        }\n\n                        order = c.sortVars[ col ].order;\n                        dir = ( '' + val[ 1 ] ).match( /^(1|d|s|o|n)/ );\n                        dir = dir ? dir[ 0 ] : '';\n                        // 0/(a)sc (default), 1/(d)esc, (s)ame, (o)pposite, (n)ext\n                        switch ( dir ) {\n                            case '1' : case 'd' : // descending\n                                dir = 1;\n                                break;\n                            case 's' : // same direction (as primary column)\n                                // if primary sort is set to 's', make it ascending\n                                dir = primary || 0;\n                                break;\n                            case 'o' :\n                                temp = order[ ( primary || 0 ) % order.length ];\n                                // opposite of primary column; but resets if primary resets\n                                dir = temp === 0 ? 1 : temp === 1 ? 0 : 2;\n                                break;\n                            case 'n' :\n                                dir = order[ ( ++c.sortVars[ col ].count ) % order.length ];\n                                break;\n                            default : // ascending\n                                dir = 0;\n                                break;\n                        }\n                        primary = indx === 0 ? dir : primary;\n                        group = [ col, parseInt( dir, 10 ) || 0 ];\n                        c.sortList[ c.sortList.length ] = group;\n                        dir = $.inArray( group[ 1 ], order ); // fixes issue #167\n                        c.sortVars[ col ].count = dir >= 0 ? dir : group[ 1 ] % order.length;\n                    }\n                }\n            },\n\n            updateAll : function( c, resort, callback ) {\n                var table = c.table;\n                table.isUpdating = true;\n                ts.refreshWidgets( table, true, true );\n                ts.buildHeaders( c );\n                ts.bindEvents( table, c.$headers, true );\n                ts.bindMethods( c );\n                ts.commonUpdate( c, resort, callback );\n            },\n\n            update : function( c, resort, callback ) {\n                var table = c.table;\n                table.isUpdating = true;\n                // update sorting (if enabled/disabled)\n                ts.updateHeader( c );\n                ts.commonUpdate( c, resort, callback );\n            },\n\n            // simple header update - see #989\n            updateHeaders : function( c, callback ) {\n                c.table.isUpdating = true;\n                ts.buildHeaders( c );\n                ts.bindEvents( c.table, c.$headers, true );\n                ts.resortComplete( c, callback );\n            },\n\n            updateCell : function( c, cell, resort, callback ) {\n                // updateCell for child rows is a mess - we'll ignore them for now\n                // eventually I'll break out the \"update\" row cache code to make everything consistent\n                if ( $( cell ).closest( 'tr' ).hasClass( c.cssChildRow ) ) {\n                    console.warn('Tablesorter Warning! \"updateCell\" for child row content has been disabled, use \"update\" instead');\n                    return;\n                }\n                if ( ts.isEmptyObject( c.cache ) ) {\n                    // empty table, do an update instead - fixes #1099\n                    ts.updateHeader( c );\n                    ts.commonUpdate( c, resort, callback );\n                    return;\n                }\n                c.table.isUpdating = true;\n                c.$table.find( c.selectorRemove ).remove();\n                // get position from the dom\n                var tmp, indx, row, icell, cache, len,\n                    $tbodies = c.$tbodies,\n                    $cell = $( cell ),\n                    // update cache - format: function( s, table, cell, cellIndex )\n                    // no closest in jQuery v1.2.6\n                    tbodyIndex = $tbodies.index( ts.getClosest( $cell, 'tbody' ) ),\n                    tbcache = c.cache[ tbodyIndex ],\n                    $row = ts.getClosest( $cell, 'tr' );\n                cell = $cell[ 0 ]; // in case cell is a jQuery object\n                // tbody may not exist if update is initialized while tbody is removed for processing\n                if ( $tbodies.length && tbodyIndex >= 0 ) {\n                    row = $tbodies.eq( tbodyIndex ).find( 'tr' ).not( '.' + c.cssChildRow ).index( $row );\n                    cache = tbcache.normalized[ row ];\n                    len = $row[ 0 ].cells.length;\n                    if ( len !== c.columns ) {\n                        // colspan in here somewhere!\n                        icell = 0;\n                        tmp = false;\n                        for ( indx = 0; indx < len; indx++ ) {\n                            if ( !tmp && $row[ 0 ].cells[ indx ] !== cell ) {\n                                icell += $row[ 0 ].cells[ indx ].colSpan;\n                            } else {\n                                tmp = true;\n                            }\n                        }\n                    } else {\n                        icell = $cell.index();\n                    }\n                    tmp = ts.getElementText( c, cell, icell ); // raw\n                    cache[ c.columns ].raw[ icell ] = tmp;\n                    tmp = ts.getParsedText( c, cell, icell, tmp );\n                    cache[ icell ] = tmp; // parsed\n                    if ( ( c.parsers[ icell ].type || '' ).toLowerCase() === 'numeric' ) {\n                        // update column max value (ignore sign)\n                        tbcache.colMax[ icell ] = Math.max( Math.abs( tmp ) || 0, tbcache.colMax[ icell ] || 0 );\n                    }\n                    tmp = resort !== 'undefined' ? resort : c.resort;\n                    if ( tmp !== false ) {\n                        // widgets will be reapplied\n                        ts.checkResort( c, tmp, callback );\n                    } else {\n                        // don't reapply widgets is resort is false, just in case it causes\n                        // problems with element focus\n                        ts.resortComplete( c, callback );\n                    }\n                } else {\n                    if ( ts.debug(c, 'core') ) {\n                        console.error( 'updateCell aborted, tbody missing or not within the indicated table' );\n                    }\n                    c.table.isUpdating = false;\n                }\n            },\n\n            addRows : function( c, $row, resort, callback ) {\n                var txt, val, tbodyIndex, rowIndex, rows, cellIndex, len, order,\n                    cacheIndex, rowData, cells, cell, span,\n                    // allow passing a row string if only one non-info tbody exists in the table\n                    valid = typeof $row === 'string' && c.$tbodies.length === 1 && /<tr/.test( $row || '' ),\n                    table = c.table;\n                if ( valid ) {\n                    $row = $( $row );\n                    c.$tbodies.append( $row );\n                } else if (\n                    !$row ||\n                    // row is a jQuery object?\n                    !( $row instanceof $ ) ||\n                    // row contained in the table?\n                    ( ts.getClosest( $row, 'table' )[ 0 ] !== c.table )\n                ) {\n                    if ( ts.debug(c, 'core') ) {\n                        console.error( 'addRows method requires (1) a jQuery selector reference to rows that have already ' +\n                            'been added to the table, or (2) row HTML string to be added to a table with only one tbody' );\n                    }\n                    return false;\n                }\n                table.isUpdating = true;\n                if ( ts.isEmptyObject( c.cache ) ) {\n                    // empty table, do an update instead - fixes #450\n                    ts.updateHeader( c );\n                    ts.commonUpdate( c, resort, callback );\n                } else {\n                    rows = $row.filter( 'tr' ).attr( 'role', 'row' ).length;\n                    tbodyIndex = c.$tbodies.index( $row.parents( 'tbody' ).filter( ':first' ) );\n                    // fixes adding rows to an empty table - see issue #179\n                    if ( !( c.parsers && c.parsers.length ) ) {\n                        ts.setupParsers( c );\n                    }\n                    // add each row\n                    for ( rowIndex = 0; rowIndex < rows; rowIndex++ ) {\n                        cacheIndex = 0;\n                        len = $row[ rowIndex ].cells.length;\n                        order = c.cache[ tbodyIndex ].normalized.length;\n                        cells = [];\n                        rowData = {\n                            child : [],\n                            raw : [],\n                            $row : $row.eq( rowIndex ),\n                            order : order\n                        };\n                        // add each cell\n                        for ( cellIndex = 0; cellIndex < len; cellIndex++ ) {\n                            cell = $row[ rowIndex ].cells[ cellIndex ];\n                            txt = ts.getElementText( c, cell, cacheIndex );\n                            rowData.raw[ cacheIndex ] = txt;\n                            val = ts.getParsedText( c, cell, cacheIndex, txt );\n                            cells[ cacheIndex ] = val;\n                            if ( ( c.parsers[ cacheIndex ].type || '' ).toLowerCase() === 'numeric' ) {\n                                // update column max value (ignore sign)\n                                c.cache[ tbodyIndex ].colMax[ cacheIndex ] =\n                                    Math.max( Math.abs( val ) || 0, c.cache[ tbodyIndex ].colMax[ cacheIndex ] || 0 );\n                            }\n                            span = cell.colSpan - 1;\n                            if ( span > 0 ) {\n                                cacheIndex += span;\n                            }\n                            cacheIndex++;\n                        }\n                        // add the row data to the end\n                        cells[ c.columns ] = rowData;\n                        // update cache\n                        c.cache[ tbodyIndex ].normalized[ order ] = cells;\n                    }\n                    // resort using current settings\n                    ts.checkResort( c, resort, callback );\n                }\n            },\n\n            updateCache : function( c, callback, $tbodies ) {\n                // rebuild parsers\n                if ( !( c.parsers && c.parsers.length ) ) {\n                    ts.setupParsers( c, $tbodies );\n                }\n                // rebuild the cache map\n                ts.buildCache( c, callback, $tbodies );\n            },\n\n            // init flag (true) used by pager plugin to prevent widget application\n            // renamed from appendToTable\n            appendCache : function( c, init ) {\n                var parsed, totalRows, $tbody, $curTbody, rowIndex, tbodyIndex, appendTime,\n                    table = c.table,\n                    $tbodies = c.$tbodies,\n                    rows = [],\n                    cache = c.cache;\n                // empty table - fixes #206/#346\n                if ( ts.isEmptyObject( cache ) ) {\n                    // run pager appender in case the table was just emptied\n                    return c.appender ? c.appender( table, rows ) :\n                        table.isUpdating ? c.$table.triggerHandler( 'updateComplete', table ) : ''; // Fixes #532\n                }\n                if ( ts.debug(c, 'core') ) {\n                    appendTime = new Date();\n                }\n                for ( tbodyIndex = 0; tbodyIndex < $tbodies.length; tbodyIndex++ ) {\n                    $tbody = $tbodies.eq( tbodyIndex );\n                    if ( $tbody.length ) {\n                        // detach tbody for manipulation\n                        $curTbody = ts.processTbody( table, $tbody, true );\n                        parsed = cache[ tbodyIndex ].normalized;\n                        totalRows = parsed.length;\n                        for ( rowIndex = 0; rowIndex < totalRows; rowIndex++ ) {\n                            rows[rows.length] = parsed[ rowIndex ][ c.columns ].$row;\n                            // removeRows used by the pager plugin; don't render if using ajax - fixes #411\n                            if ( !c.appender || ( c.pager && !c.pager.removeRows && !c.pager.ajax ) ) {\n                                $curTbody.append( parsed[ rowIndex ][ c.columns ].$row );\n                            }\n                        }\n                        // restore tbody\n                        ts.processTbody( table, $curTbody, false );\n                    }\n                }\n                if ( c.appender ) {\n                    c.appender( table, rows );\n                }\n                if ( ts.debug(c, 'core') ) {\n                    console.log( 'Rebuilt table' + ts.benchmark( appendTime ) );\n                }\n                // apply table widgets; but not before ajax completes\n                if ( !init && !c.appender ) {\n                    ts.applyWidget( table );\n                }\n                if ( table.isUpdating ) {\n                    c.$table.triggerHandler( 'updateComplete', table );\n                }\n            },\n\n            commonUpdate : function( c, resort, callback ) {\n                // remove rows/elements before update\n                c.$table.find( c.selectorRemove ).remove();\n                // rebuild parsers\n                ts.setupParsers( c );\n                // rebuild the cache map\n                ts.buildCache( c );\n                ts.checkResort( c, resort, callback );\n            },\n\n            /*\n            ▄█████ ▄████▄ █████▄ ██████ ██ █████▄ ▄████▄\n            ▀█▄    ██  ██ ██▄▄██   ██   ██ ██  ██ ██ ▄▄▄\n               ▀█▄ ██  ██ ██▀██    ██   ██ ██  ██ ██ ▀██\n            █████▀ ▀████▀ ██  ██   ██   ██ ██  ██ ▀████▀\n            */\n            initSort : function( c, cell, event ) {\n                if ( c.table.isUpdating ) {\n                    // let any updates complete before initializing a sort\n                    return setTimeout( function() {\n                        ts.initSort( c, cell, event );\n                    }, 50 );\n                }\n\n                var arry, indx, headerIndx, dir, temp, tmp, $header,\n                    notMultiSort = !event[ c.sortMultiSortKey ],\n                    table = c.table,\n                    len = c.$headers.length,\n                    th = ts.getClosest( $( cell ), 'th, td' ),\n                    col = parseInt( th.attr( 'data-column' ), 10 ),\n                    sortedBy = event.type === 'mouseup' ? 'user' : event.type,\n                    order = c.sortVars[ col ].order;\n                th = th[0];\n                // Only call sortStart if sorting is enabled\n                c.$table.triggerHandler( 'sortStart', table );\n                // get current column sort order\n                tmp = ( c.sortVars[ col ].count + 1 ) % order.length;\n                c.sortVars[ col ].count = event[ c.sortResetKey ] ? 2 : tmp;\n                // reset all sorts on non-current column - issue #30\n                if ( c.sortRestart ) {\n                    for ( headerIndx = 0; headerIndx < len; headerIndx++ ) {\n                        $header = c.$headers.eq( headerIndx );\n                        tmp = parseInt( $header.attr( 'data-column' ), 10 );\n                        // only reset counts on columns that weren't just clicked on and if not included in a multisort\n                        if ( col !== tmp && ( notMultiSort || $header.hasClass( ts.css.sortNone ) ) ) {\n                            c.sortVars[ tmp ].count = -1;\n                        }\n                    }\n                }\n                // user only wants to sort on one column\n                if ( notMultiSort ) {\n                    $.each( c.sortVars, function( i ) {\n                        c.sortVars[ i ].sortedBy = '';\n                    });\n                    // flush the sort list\n                    c.sortList = [];\n                    c.last.sortList = [];\n                    if ( c.sortForce !== null ) {\n                        arry = c.sortForce;\n                        for ( indx = 0; indx < arry.length; indx++ ) {\n                            if ( arry[ indx ][ 0 ] !== col ) {\n                                c.sortList[ c.sortList.length ] = arry[ indx ];\n                                c.sortVars[ arry[ indx ][ 0 ] ].sortedBy = 'sortForce';\n                            }\n                        }\n                    }\n                    // add column to sort list\n                    dir = order[ c.sortVars[ col ].count ];\n                    if ( dir < 2 ) {\n                        c.sortList[ c.sortList.length ] = [ col, dir ];\n                        c.sortVars[ col ].sortedBy = sortedBy;\n                        // add other columns if header spans across multiple\n                        if ( th.colSpan > 1 ) {\n                            for ( indx = 1; indx < th.colSpan; indx++ ) {\n                                c.sortList[ c.sortList.length ] = [ col + indx, dir ];\n                                // update count on columns in colSpan\n                                c.sortVars[ col + indx ].count = $.inArray( dir, order );\n                                c.sortVars[ col + indx ].sortedBy = sortedBy;\n                            }\n                        }\n                    }\n                    // multi column sorting\n                } else {\n                    // get rid of the sortAppend before adding more - fixes issue #115 & #523\n                    c.sortList = $.extend( [], c.last.sortList );\n\n                    // the user has clicked on an already sorted column\n                    if ( ts.isValueInArray( col, c.sortList ) >= 0 ) {\n                        // reverse the sorting direction\n                        c.sortVars[ col ].sortedBy = sortedBy;\n                        for ( indx = 0; indx < c.sortList.length; indx++ ) {\n                            tmp = c.sortList[ indx ];\n                            if ( tmp[ 0 ] === col ) {\n                                // order.count seems to be incorrect when compared to cell.count\n                                tmp[ 1 ] = order[ c.sortVars[ col ].count ];\n                                if ( tmp[1] === 2 ) {\n                                    c.sortList.splice( indx, 1 );\n                                    c.sortVars[ col ].count = -1;\n                                }\n                            }\n                        }\n                    } else {\n                        // add column to sort list array\n                        dir = order[ c.sortVars[ col ].count ];\n                        c.sortVars[ col ].sortedBy = sortedBy;\n                        if ( dir < 2 ) {\n                            c.sortList[ c.sortList.length ] = [ col, dir ];\n                            // add other columns if header spans across multiple\n                            if ( th.colSpan > 1 ) {\n                                for ( indx = 1; indx < th.colSpan; indx++ ) {\n                                    c.sortList[ c.sortList.length ] = [ col + indx, dir ];\n                                    // update count on columns in colSpan\n                                    c.sortVars[ col + indx ].count = $.inArray( dir, order );\n                                    c.sortVars[ col + indx ].sortedBy = sortedBy;\n                                }\n                            }\n                        }\n                    }\n                }\n                // save sort before applying sortAppend\n                c.last.sortList = $.extend( [], c.sortList );\n                if ( c.sortList.length && c.sortAppend ) {\n                    arry = $.isArray( c.sortAppend ) ? c.sortAppend : c.sortAppend[ c.sortList[ 0 ][ 0 ] ];\n                    if ( !ts.isEmptyObject( arry ) ) {\n                        for ( indx = 0; indx < arry.length; indx++ ) {\n                            if ( arry[ indx ][ 0 ] !== col && ts.isValueInArray( arry[ indx ][ 0 ], c.sortList ) < 0 ) {\n                                dir = arry[ indx ][ 1 ];\n                                temp = ( '' + dir ).match( /^(a|d|s|o|n)/ );\n                                if ( temp ) {\n                                    tmp = c.sortList[ 0 ][ 1 ];\n                                    switch ( temp[ 0 ] ) {\n                                        case 'd' :\n                                            dir = 1;\n                                            break;\n                                        case 's' :\n                                            dir = tmp;\n                                            break;\n                                        case 'o' :\n                                            dir = tmp === 0 ? 1 : 0;\n                                            break;\n                                        case 'n' :\n                                            dir = ( tmp + 1 ) % order.length;\n                                            break;\n                                        default:\n                                            dir = 0;\n                                            break;\n                                    }\n                                }\n                                c.sortList[ c.sortList.length ] = [ arry[ indx ][ 0 ], dir ];\n                                c.sortVars[ arry[ indx ][ 0 ] ].sortedBy = 'sortAppend';\n                            }\n                        }\n                    }\n                }\n                // sortBegin event triggered immediately before the sort\n                c.$table.triggerHandler( 'sortBegin', table );\n                // setTimeout needed so the processing icon shows up\n                setTimeout( function() {\n                    // set css for headers\n                    ts.setHeadersCss( c );\n                    ts.multisort( c );\n                    ts.appendCache( c );\n                    c.$table.triggerHandler( 'sortBeforeEnd', table );\n                    c.$table.triggerHandler( 'sortEnd', table );\n                }, 1 );\n            },\n\n            // sort multiple columns\n            multisort : function( c ) { /*jshint loopfunc:true */\n                var tbodyIndex, sortTime, colMax, rows, tmp,\n                    table = c.table,\n                    sorter = [],\n                    dir = 0,\n                    textSorter = c.textSorter || '',\n                    sortList = c.sortList,\n                    sortLen = sortList.length,\n                    len = c.$tbodies.length;\n                if ( c.serverSideSorting || ts.isEmptyObject( c.cache ) ) {\n                    // empty table - fixes #206/#346\n                    return;\n                }\n                if ( ts.debug(c, 'core') ) { sortTime = new Date(); }\n                // cache textSorter to optimize speed\n                if ( typeof textSorter === 'object' ) {\n                    colMax = c.columns;\n                    while ( colMax-- ) {\n                        tmp = ts.getColumnData( table, textSorter, colMax );\n                        if ( typeof tmp === 'function' ) {\n                            sorter[ colMax ] = tmp;\n                        }\n                    }\n                }\n                for ( tbodyIndex = 0; tbodyIndex < len; tbodyIndex++ ) {\n                    colMax = c.cache[ tbodyIndex ].colMax;\n                    rows = c.cache[ tbodyIndex ].normalized;\n\n                    rows.sort( function( a, b ) {\n                        var sortIndex, num, col, order, sort, x, y;\n                        // rows is undefined here in IE, so don't use it!\n                        for ( sortIndex = 0; sortIndex < sortLen; sortIndex++ ) {\n                            col = sortList[ sortIndex ][ 0 ];\n                            order = sortList[ sortIndex ][ 1 ];\n                            // sort direction, true = asc, false = desc\n                            dir = order === 0;\n\n                            if ( c.sortStable && a[ col ] === b[ col ] && sortLen === 1 ) {\n                                return a[ c.columns ].order - b[ c.columns ].order;\n                            }\n\n                            // fallback to natural sort since it is more robust\n                            num = /n/i.test( ts.getSortType( c.parsers, col ) );\n                            if ( num && c.strings[ col ] ) {\n                                // sort strings in numerical columns\n                                if ( typeof ( ts.string[ c.strings[ col ] ] ) === 'boolean' ) {\n                                    num = ( dir ? 1 : -1 ) * ( ts.string[ c.strings[ col ] ] ? -1 : 1 );\n                                } else {\n                                    num = ( c.strings[ col ] ) ? ts.string[ c.strings[ col ] ] || 0 : 0;\n                                }\n                                // fall back to built-in numeric sort\n                                // var sort = $.tablesorter['sort' + s]( a[col], b[col], dir, colMax[col], table );\n                                sort = c.numberSorter ? c.numberSorter( a[ col ], b[ col ], dir, colMax[ col ], table ) :\n                                    ts[ 'sortNumeric' + ( dir ? 'Asc' : 'Desc' ) ]( a[ col ], b[ col ], num, colMax[ col ], col, c );\n                            } else {\n                                // set a & b depending on sort direction\n                                x = dir ? a : b;\n                                y = dir ? b : a;\n                                // text sort function\n                                if ( typeof textSorter === 'function' ) {\n                                    // custom OVERALL text sorter\n                                    sort = textSorter( x[ col ], y[ col ], dir, col, table );\n                                } else if ( typeof sorter[ col ] === 'function' ) {\n                                    // custom text sorter for a SPECIFIC COLUMN\n                                    sort = sorter[ col ]( x[ col ], y[ col ], dir, col, table );\n                                } else {\n                                    // fall back to natural sort\n                                    sort = ts[ 'sortNatural' + ( dir ? 'Asc' : 'Desc' ) ]( a[ col ] || '', b[ col ] || '', col, c );\n                                }\n                            }\n                            if ( sort ) { return sort; }\n                        }\n                        return a[ c.columns ].order - b[ c.columns ].order;\n                    });\n                }\n                if ( ts.debug(c, 'core') ) {\n                    console.log( 'Applying sort ' + sortList.toString() + ts.benchmark( sortTime ) );\n                }\n            },\n\n            resortComplete : function( c, callback ) {\n                if ( c.table.isUpdating ) {\n                    c.$table.triggerHandler( 'updateComplete', c.table );\n                }\n                if ( $.isFunction( callback ) ) {\n                    callback( c.table );\n                }\n            },\n\n            checkResort : function( c, resort, callback ) {\n                var sortList = $.isArray( resort ) ? resort : c.sortList,\n                    // if no resort parameter is passed, fallback to config.resort (true by default)\n                    resrt = typeof resort === 'undefined' ? c.resort : resort;\n                // don't try to resort if the table is still processing\n                // this will catch spamming of the updateCell method\n                if ( resrt !== false && !c.serverSideSorting && !c.table.isProcessing ) {\n                    if ( sortList.length ) {\n                        ts.sortOn( c, sortList, function() {\n                            ts.resortComplete( c, callback );\n                        }, true );\n                    } else {\n                        ts.sortReset( c, function() {\n                            ts.resortComplete( c, callback );\n                            ts.applyWidget( c.table, false );\n                        } );\n                    }\n                } else {\n                    ts.resortComplete( c, callback );\n                    ts.applyWidget( c.table, false );\n                }\n            },\n\n            sortOn : function( c, list, callback, init ) {\n                var indx,\n                    table = c.table;\n                c.$table.triggerHandler( 'sortStart', table );\n                for (indx = 0; indx < c.columns; indx++) {\n                    c.sortVars[ indx ].sortedBy = ts.isValueInArray( indx, list ) > -1 ? 'sorton' : '';\n                }\n                // update header count index\n                ts.updateHeaderSortCount( c, list );\n                // set css for headers\n                ts.setHeadersCss( c );\n                // fixes #346\n                if ( c.delayInit && ts.isEmptyObject( c.cache ) ) {\n                    ts.buildCache( c );\n                }\n                c.$table.triggerHandler( 'sortBegin', table );\n                // sort the table and append it to the dom\n                ts.multisort( c );\n                ts.appendCache( c, init );\n                c.$table.triggerHandler( 'sortBeforeEnd', table );\n                c.$table.triggerHandler( 'sortEnd', table );\n                ts.applyWidget( table );\n                if ( $.isFunction( callback ) ) {\n                    callback( table );\n                }\n            },\n\n            sortReset : function( c, callback ) {\n                c.sortList = [];\n                var indx;\n                for (indx = 0; indx < c.columns; indx++) {\n                    c.sortVars[ indx ].count = -1;\n                    c.sortVars[ indx ].sortedBy = '';\n                }\n                ts.setHeadersCss( c );\n                ts.multisort( c );\n                ts.appendCache( c );\n                if ( $.isFunction( callback ) ) {\n                    callback( c.table );\n                }\n            },\n\n            getSortType : function( parsers, column ) {\n                return ( parsers && parsers[ column ] ) ? parsers[ column ].type || '' : '';\n            },\n\n            getOrder : function( val ) {\n                // look for 'd' in 'desc' order; return true\n                return ( /^d/i.test( val ) || val === 1 );\n            },\n\n            // Natural sort - https://github.com/overset/javascript-natural-sort (date sorting removed)\n            sortNatural : function( a, b ) {\n                if ( a === b ) { return 0; }\n                a = ( a || '' ).toString();\n                b = ( b || '' ).toString();\n                var aNum, bNum, aFloat, bFloat, indx, max,\n                    regex = ts.regex;\n                // first try and sort Hex codes\n                if ( regex.hex.test( b ) ) {\n                    aNum = parseInt( a.match( regex.hex ), 16 );\n                    bNum = parseInt( b.match( regex.hex ), 16 );\n                    if ( aNum < bNum ) { return -1; }\n                    if ( aNum > bNum ) { return 1; }\n                }\n                // chunk/tokenize\n                aNum = a.replace( regex.chunk, '\\\\0$1\\\\0' ).replace( regex.chunks, '' ).split( '\\\\0' );\n                bNum = b.replace( regex.chunk, '\\\\0$1\\\\0' ).replace( regex.chunks, '' ).split( '\\\\0' );\n                max = Math.max( aNum.length, bNum.length );\n                // natural sorting through split numeric strings and default strings\n                for ( indx = 0; indx < max; indx++ ) {\n                    // find floats not starting with '0', string or 0 if not defined\n                    aFloat = isNaN( aNum[ indx ] ) ? aNum[ indx ] || 0 : parseFloat( aNum[ indx ] ) || 0;\n                    bFloat = isNaN( bNum[ indx ] ) ? bNum[ indx ] || 0 : parseFloat( bNum[ indx ] ) || 0;\n                    // handle numeric vs string comparison - number < string - (Kyle Adams)\n                    if ( isNaN( aFloat ) !== isNaN( bFloat ) ) { return isNaN( aFloat ) ? 1 : -1; }\n                    // rely on string comparison if different types - i.e. '02' < 2 != '02' < '2'\n                    if ( typeof aFloat !== typeof bFloat ) {\n                        aFloat += '';\n                        bFloat += '';\n                    }\n                    if ( aFloat < bFloat ) { return -1; }\n                    if ( aFloat > bFloat ) { return 1; }\n                }\n                return 0;\n            },\n\n            sortNaturalAsc : function( a, b, col, c ) {\n                if ( a === b ) { return 0; }\n                var empty = ts.string[ ( c.empties[ col ] || c.emptyTo ) ];\n                if ( a === '' && empty !== 0 ) { return typeof empty === 'boolean' ? ( empty ? -1 : 1 ) : -empty || -1; }\n                if ( b === '' && empty !== 0 ) { return typeof empty === 'boolean' ? ( empty ? 1 : -1 ) : empty || 1; }\n                return ts.sortNatural( a, b );\n            },\n\n            sortNaturalDesc : function( a, b, col, c ) {\n                if ( a === b ) { return 0; }\n                var empty = ts.string[ ( c.empties[ col ] || c.emptyTo ) ];\n                if ( a === '' && empty !== 0 ) { return typeof empty === 'boolean' ? ( empty ? -1 : 1 ) : empty || 1; }\n                if ( b === '' && empty !== 0 ) { return typeof empty === 'boolean' ? ( empty ? 1 : -1 ) : -empty || -1; }\n                return ts.sortNatural( b, a );\n            },\n\n            // basic alphabetical sort\n            sortText : function( a, b ) {\n                return a > b ? 1 : ( a < b ? -1 : 0 );\n            },\n\n            // return text string value by adding up ascii value\n            // so the text is somewhat sorted when using a digital sort\n            // this is NOT an alphanumeric sort\n            getTextValue : function( val, num, max ) {\n                if ( max ) {\n                    // make sure the text value is greater than the max numerical value (max)\n                    var indx,\n                        len = val ? val.length : 0,\n                        n = max + num;\n                    for ( indx = 0; indx < len; indx++ ) {\n                        n += val.charCodeAt( indx );\n                    }\n                    return num * n;\n                }\n                return 0;\n            },\n\n            sortNumericAsc : function( a, b, num, max, col, c ) {\n                if ( a === b ) { return 0; }\n                var empty = ts.string[ ( c.empties[ col ] || c.emptyTo ) ];\n                if ( a === '' && empty !== 0 ) { return typeof empty === 'boolean' ? ( empty ? -1 : 1 ) : -empty || -1; }\n                if ( b === '' && empty !== 0 ) { return typeof empty === 'boolean' ? ( empty ? 1 : -1 ) : empty || 1; }\n                if ( isNaN( a ) ) { a = ts.getTextValue( a, num, max ); }\n                if ( isNaN( b ) ) { b = ts.getTextValue( b, num, max ); }\n                return a - b;\n            },\n\n            sortNumericDesc : function( a, b, num, max, col, c ) {\n                if ( a === b ) { return 0; }\n                var empty = ts.string[ ( c.empties[ col ] || c.emptyTo ) ];\n                if ( a === '' && empty !== 0 ) { return typeof empty === 'boolean' ? ( empty ? -1 : 1 ) : empty || 1; }\n                if ( b === '' && empty !== 0 ) { return typeof empty === 'boolean' ? ( empty ? 1 : -1 ) : -empty || -1; }\n                if ( isNaN( a ) ) { a = ts.getTextValue( a, num, max ); }\n                if ( isNaN( b ) ) { b = ts.getTextValue( b, num, max ); }\n                return b - a;\n            },\n\n            sortNumeric : function( a, b ) {\n                return a - b;\n            },\n\n            /*\n            ██ ██ ██ ██ █████▄ ▄████▄ ██████ ██████ ▄█████\n            ██ ██ ██ ██ ██  ██ ██ ▄▄▄ ██▄▄     ██   ▀█▄\n            ██ ██ ██ ██ ██  ██ ██ ▀██ ██▀▀     ██      ▀█▄\n            ███████▀ ██ █████▀ ▀████▀ ██████   ██   █████▀\n            */\n            addWidget : function( widget ) {\n                if ( widget.id && !ts.isEmptyObject( ts.getWidgetById( widget.id ) ) ) {\n                    console.warn( '\"' + widget.id + '\" widget was loaded more than once!' );\n                }\n                ts.widgets[ ts.widgets.length ] = widget;\n            },\n\n            hasWidget : function( $table, name ) {\n                $table = $( $table );\n                return $table.length && $table[ 0 ].config && $table[ 0 ].config.widgetInit[ name ] || false;\n            },\n\n            getWidgetById : function( name ) {\n                var indx, widget,\n                    len = ts.widgets.length;\n                for ( indx = 0; indx < len; indx++ ) {\n                    widget = ts.widgets[ indx ];\n                    if ( widget && widget.id && widget.id.toLowerCase() === name.toLowerCase() ) {\n                        return widget;\n                    }\n                }\n            },\n\n            applyWidgetOptions : function( table ) {\n                var indx, widget, wo,\n                    c = table.config,\n                    len = c.widgets.length;\n                if ( len ) {\n                    for ( indx = 0; indx < len; indx++ ) {\n                        widget = ts.getWidgetById( c.widgets[ indx ] );\n                        if ( widget && widget.options ) {\n                            wo = $.extend( true, {}, widget.options );\n                            c.widgetOptions = $.extend( true, wo, c.widgetOptions );\n                            // add widgetOptions to defaults for option validator\n                            $.extend( true, ts.defaults.widgetOptions, widget.options );\n                        }\n                    }\n                }\n            },\n\n            addWidgetFromClass : function( table ) {\n                var len, indx,\n                    c = table.config,\n                    // look for widgets to apply from table class\n                    // don't match from 'ui-widget-content'; use \\S instead of \\w to include widgets\n                    // with dashes in the name, e.g. \"widget-test-2\" extracts out \"test-2\"\n                    regex = '^' + c.widgetClass.replace( ts.regex.templateName, '(\\\\S+)+' ) + '$',\n                    widgetClass = new RegExp( regex, 'g' ),\n                    // split up table class (widget id's can include dashes) - stop using match\n                    // otherwise only one widget gets extracted, see #1109\n                    widgets = ( table.className || '' ).split( ts.regex.spaces );\n                if ( widgets.length ) {\n                    len = widgets.length;\n                    for ( indx = 0; indx < len; indx++ ) {\n                        if ( widgets[ indx ].match( widgetClass ) ) {\n                            c.widgets[ c.widgets.length ] = widgets[ indx ].replace( widgetClass, '$1' );\n                        }\n                    }\n                }\n            },\n\n            applyWidgetId : function( table, id, init ) {\n                table = $(table)[0];\n                var applied, time, name,\n                    c = table.config,\n                    wo = c.widgetOptions,\n                    debug = ts.debug(c, 'core'),\n                    widget = ts.getWidgetById( id );\n                if ( widget ) {\n                    name = widget.id;\n                    applied = false;\n                    // add widget name to option list so it gets reapplied after sorting, filtering, etc\n                    if ( $.inArray( name, c.widgets ) < 0 ) {\n                        c.widgets[ c.widgets.length ] = name;\n                    }\n                    if ( debug ) { time = new Date(); }\n\n                    if ( init || !( c.widgetInit[ name ] ) ) {\n                        // set init flag first to prevent calling init more than once (e.g. pager)\n                        c.widgetInit[ name ] = true;\n                        if ( table.hasInitialized ) {\n                            // don't reapply widget options on tablesorter init\n                            ts.applyWidgetOptions( table );\n                        }\n                        if ( typeof widget.init === 'function' ) {\n                            applied = true;\n                            if ( debug ) {\n                                console[ console.group ? 'group' : 'log' ]( 'Initializing ' + name + ' widget' );\n                            }\n                            widget.init( table, widget, c, wo );\n                        }\n                    }\n                    if ( !init && typeof widget.format === 'function' ) {\n                        applied = true;\n                        if ( debug ) {\n                            console[ console.group ? 'group' : 'log' ]( 'Updating ' + name + ' widget' );\n                        }\n                        widget.format( table, c, wo, false );\n                    }\n                    if ( debug ) {\n                        if ( applied ) {\n                            console.log( 'Completed ' + ( init ? 'initializing ' : 'applying ' ) + name + ' widget' + ts.benchmark( time ) );\n                            if ( console.groupEnd ) { console.groupEnd(); }\n                        }\n                    }\n                }\n            },\n\n            applyWidget : function( table, init, callback ) {\n                table = $( table )[ 0 ]; // in case this is called externally\n                var indx, len, names, widget, time,\n                    c = table.config,\n                    debug = ts.debug(c, 'core'),\n                    widgets = [];\n                // prevent numerous consecutive widget applications\n                if ( init !== false && table.hasInitialized && ( table.isApplyingWidgets || table.isUpdating ) ) {\n                    return;\n                }\n                if ( debug ) { time = new Date(); }\n                ts.addWidgetFromClass( table );\n                // prevent \"tablesorter-ready\" from firing multiple times in a row\n                clearTimeout( c.timerReady );\n                if ( c.widgets.length ) {\n                    table.isApplyingWidgets = true;\n                    // ensure unique widget ids\n                    c.widgets = $.grep( c.widgets, function( val, index ) {\n                        return $.inArray( val, c.widgets ) === index;\n                    });\n                    names = c.widgets || [];\n                    len = names.length;\n                    // build widget array & add priority as needed\n                    for ( indx = 0; indx < len; indx++ ) {\n                        widget = ts.getWidgetById( names[ indx ] );\n                        if ( widget && widget.id ) {\n                            // set priority to 10 if not defined\n                            if ( !widget.priority ) { widget.priority = 10; }\n                            widgets[ indx ] = widget;\n                        } else if ( debug ) {\n                            console.warn( '\"' + names[ indx ] + '\" was enabled, but the widget code has not been loaded!' );\n                        }\n                    }\n                    // sort widgets by priority\n                    widgets.sort( function( a, b ) {\n                        return a.priority < b.priority ? -1 : a.priority === b.priority ? 0 : 1;\n                    });\n                    // add/update selected widgets\n                    len = widgets.length;\n                    if ( debug ) {\n                        console[ console.group ? 'group' : 'log' ]( 'Start ' + ( init ? 'initializing' : 'applying' ) + ' widgets' );\n                    }\n                    for ( indx = 0; indx < len; indx++ ) {\n                        widget = widgets[ indx ];\n                        if ( widget && widget.id ) {\n                            ts.applyWidgetId( table, widget.id, init );\n                        }\n                    }\n                    if ( debug && console.groupEnd ) { console.groupEnd(); }\n                }\n                c.timerReady = setTimeout( function() {\n                    table.isApplyingWidgets = false;\n                    $.data( table, 'lastWidgetApplication', new Date() );\n                    c.$table.triggerHandler( 'tablesorter-ready' );\n                    // callback executed on init only\n                    if ( !init && typeof callback === 'function' ) {\n                        callback( table );\n                    }\n                    if ( debug ) {\n                        widget = c.widgets.length;\n                        console.log( 'Completed ' +\n                            ( init === true ? 'initializing ' : 'applying ' ) + widget +\n                            ' widget' + ( widget !== 1 ? 's' : '' ) + ts.benchmark( time ) );\n                    }\n                }, 10 );\n            },\n\n            removeWidget : function( table, name, refreshing ) {\n                table = $( table )[ 0 ];\n                var index, widget, indx, len,\n                    c = table.config;\n                // if name === true, add all widgets from $.tablesorter.widgets\n                if ( name === true ) {\n                    name = [];\n                    len = ts.widgets.length;\n                    for ( indx = 0; indx < len; indx++ ) {\n                        widget = ts.widgets[ indx ];\n                        if ( widget && widget.id ) {\n                            name[ name.length ] = widget.id;\n                        }\n                    }\n                } else {\n                    // name can be either an array of widgets names,\n                    // or a space/comma separated list of widget names\n                    name = ( $.isArray( name ) ? name.join( ',' ) : name || '' ).toLowerCase().split( /[\\s,]+/ );\n                }\n                len = name.length;\n                for ( index = 0; index < len; index++ ) {\n                    widget = ts.getWidgetById( name[ index ] );\n                    indx = $.inArray( name[ index ], c.widgets );\n                    // don't remove the widget from config.widget if refreshing\n                    if ( indx >= 0 && refreshing !== true ) {\n                        c.widgets.splice( indx, 1 );\n                    }\n                    if ( widget && widget.remove ) {\n                        if ( ts.debug(c, 'core') ) {\n                            console.log( ( refreshing ? 'Refreshing' : 'Removing' ) + ' \"' + name[ index ] + '\" widget' );\n                        }\n                        widget.remove( table, c, c.widgetOptions, refreshing );\n                        c.widgetInit[ name[ index ] ] = false;\n                    }\n                }\n                c.$table.triggerHandler( 'widgetRemoveEnd', table );\n            },\n\n            refreshWidgets : function( table, doAll, dontapply ) {\n                table = $( table )[ 0 ]; // see issue #243\n                var indx, widget,\n                    c = table.config,\n                    curWidgets = c.widgets,\n                    widgets = ts.widgets,\n                    len = widgets.length,\n                    list = [],\n                    callback = function( table ) {\n                        $( table ).triggerHandler( 'refreshComplete' );\n                    };\n                // remove widgets not defined in config.widgets, unless doAll is true\n                for ( indx = 0; indx < len; indx++ ) {\n                    widget = widgets[ indx ];\n                    if ( widget && widget.id && ( doAll || $.inArray( widget.id, curWidgets ) < 0 ) ) {\n                        list[ list.length ] = widget.id;\n                    }\n                }\n                ts.removeWidget( table, list.join( ',' ), true );\n                if ( dontapply !== true ) {\n                    // call widget init if\n                    ts.applyWidget( table, doAll || false, callback );\n                    if ( doAll ) {\n                        // apply widget format\n                        ts.applyWidget( table, false, callback );\n                    }\n                } else {\n                    callback( table );\n                }\n            },\n\n            /*\n            ██  ██ ██████ ██ ██     ██ ██████ ██ ██████ ▄█████\n            ██  ██   ██   ██ ██     ██   ██   ██ ██▄▄   ▀█▄\n            ██  ██   ██   ██ ██     ██   ██   ██ ██▀▀      ▀█▄\n            ▀████▀   ██   ██ ██████ ██   ██   ██ ██████ █████▀\n            */\n            benchmark : function( diff ) {\n                return ( ' (' + ( new Date().getTime() - diff.getTime() ) + ' ms)' );\n            },\n            // deprecated ts.log\n            log : function() {\n                console.log( arguments );\n            },\n            debug : function(c, name) {\n                return c && (\n                    c.debug === true ||\n                    typeof c.debug === 'string' && c.debug.indexOf(name) > -1\n                );\n            },\n\n            // $.isEmptyObject from jQuery v1.4\n            isEmptyObject : function( obj ) {\n                /*jshint forin: false */\n                for ( var name in obj ) {\n                    return false;\n                }\n                return true;\n            },\n\n            isValueInArray : function( column, arry ) {\n                var indx,\n                    len = arry && arry.length || 0;\n                for ( indx = 0; indx < len; indx++ ) {\n                    if ( arry[ indx ][ 0 ] === column ) {\n                        return indx;\n                    }\n                }\n                return -1;\n            },\n\n            formatFloat : function( str, table ) {\n                if ( typeof str !== 'string' || str === '' ) { return str; }\n                // allow using formatFloat without a table; defaults to US number format\n                var num,\n                    usFormat = table && table.config ? table.config.usNumberFormat !== false :\n                        typeof table !== 'undefined' ? table : true;\n                if ( usFormat ) {\n                    // US Format - 1,234,567.89 -> 1234567.89\n                    str = str.replace( ts.regex.comma, '' );\n                } else {\n                    // German Format = 1.234.567,89 -> 1234567.89\n                    // French Format = 1 234 567,89 -> 1234567.89\n                    str = str.replace( ts.regex.digitNonUS, '' ).replace( ts.regex.comma, '.' );\n                }\n                if ( ts.regex.digitNegativeTest.test( str ) ) {\n                    // make (#) into a negative number -> (10) = -10\n                    str = str.replace( ts.regex.digitNegativeReplace, '-$1' );\n                }\n                num = parseFloat( str );\n                // return the text instead of zero\n                return isNaN( num ) ? $.trim( str ) : num;\n            },\n\n            isDigit : function( str ) {\n                // replace all unwanted chars and match\n                return isNaN( str ) ?\n                    ts.regex.digitTest.test( str.toString().replace( ts.regex.digitReplace, '' ) ) :\n                    str !== '';\n            },\n\n            // computeTableHeaderCellIndexes from:\n            // http://www.javascripttoolbox.com/lib/table/examples.php\n            // http://www.javascripttoolbox.com/temp/table_cellindex.html\n            computeColumnIndex : function( $rows, c ) {\n                var i, j, k, l, cell, cells, rowIndex, rowSpan, colSpan, firstAvailCol,\n                    // total columns has been calculated, use it to set the matrixrow\n                    columns = c && c.columns || 0,\n                    matrix = [],\n                    matrixrow = new Array( columns );\n                for ( i = 0; i < $rows.length; i++ ) {\n                    cells = $rows[ i ].cells;\n                    for ( j = 0; j < cells.length; j++ ) {\n                        cell = cells[ j ];\n                        rowIndex = i;\n                        rowSpan = cell.rowSpan || 1;\n                        colSpan = cell.colSpan || 1;\n                        if ( typeof matrix[ rowIndex ] === 'undefined' ) {\n                            matrix[ rowIndex ] = [];\n                        }\n                        // Find first available column in the first row\n                        for ( k = 0; k < matrix[ rowIndex ].length + 1; k++ ) {\n                            if ( typeof matrix[ rowIndex ][ k ] === 'undefined' ) {\n                                firstAvailCol = k;\n                                break;\n                            }\n                        }\n                        // jscs:disable disallowEmptyBlocks\n                        if ( columns && cell.cellIndex === firstAvailCol ) {\n                            // don't to anything\n                        } else if ( cell.setAttribute ) {\n                            // jscs:enable disallowEmptyBlocks\n                            // add data-column (setAttribute = IE8+)\n                            cell.setAttribute( 'data-column', firstAvailCol );\n                        } else {\n                            // remove once we drop support for IE7 - 1/12/2016\n                            $( cell ).attr( 'data-column', firstAvailCol );\n                        }\n                        for ( k = rowIndex; k < rowIndex + rowSpan; k++ ) {\n                            if ( typeof matrix[ k ] === 'undefined' ) {\n                                matrix[ k ] = [];\n                            }\n                            matrixrow = matrix[ k ];\n                            for ( l = firstAvailCol; l < firstAvailCol + colSpan; l++ ) {\n                                matrixrow[ l ] = 'x';\n                            }\n                        }\n                    }\n                }\n                ts.checkColumnCount($rows, matrix, matrixrow.length);\n                return matrixrow.length;\n            },\n\n            checkColumnCount : function($rows, matrix, columns) {\n                // this DOES NOT report any tbody column issues, except for the math and\n                // and column selector widgets\n                var i, len,\n                    valid = true,\n                    cells = [];\n                for ( i = 0; i < matrix.length; i++ ) {\n                    // some matrix entries are undefined when testing the footer because\n                    // it is using the rowIndex property\n                    if ( matrix[i] ) {\n                        len = matrix[i].length;\n                        if ( matrix[i].length !== columns ) {\n                            valid = false;\n                            break;\n                        }\n                    }\n                }\n                if ( !valid ) {\n                    $rows.each( function( indx, el ) {\n                        var cell = el.parentElement.nodeName;\n                        if ( cells.indexOf( cell ) < 0 ) {\n                            cells.push( cell );\n                        }\n                    });\n                    console.error(\n                        'Invalid or incorrect number of columns in the ' +\n                        cells.join( ' or ' ) + '; expected ' + columns +\n                        ', but found ' + len + ' columns'\n                    );\n                }\n            },\n\n            // automatically add a colgroup with col elements set to a percentage width\n            fixColumnWidth : function( table ) {\n                table = $( table )[ 0 ];\n                var overallWidth, percent, $tbodies, len, index,\n                    c = table.config,\n                    $colgroup = c.$table.children( 'colgroup' );\n                // remove plugin-added colgroup, in case we need to refresh the widths\n                if ( $colgroup.length && $colgroup.hasClass( ts.css.colgroup ) ) {\n                    $colgroup.remove();\n                }\n                if ( c.widthFixed && c.$table.children( 'colgroup' ).length === 0 ) {\n                    $colgroup = $( '<colgroup class=\"' + ts.css.colgroup + '\">' );\n                    overallWidth = c.$table.width();\n                    // only add col for visible columns - fixes #371\n                    $tbodies = c.$tbodies.find( 'tr:first' ).children( ':visible' );\n                    len = $tbodies.length;\n                    for ( index = 0; index < len; index++ ) {\n                        percent = parseInt( ( $tbodies.eq( index ).width() / overallWidth ) * 1000, 10 ) / 10 + '%';\n                        $colgroup.append( $( '<col>' ).css( 'width', percent ) );\n                    }\n                    c.$table.prepend( $colgroup );\n                }\n            },\n\n            // get sorter, string, empty, etc options for each column from\n            // jQuery data, metadata, header option or header class name ('sorter-false')\n            // priority = jQuery data > meta > headers option > header class name\n            getData : function( header, configHeader, key ) {\n                var meta, cl4ss,\n                    val = '',\n                    $header = $( header );\n                if ( !$header.length ) { return ''; }\n                meta = $.metadata ? $header.metadata() : false;\n                cl4ss = ' ' + ( $header.attr( 'class' ) || '' );\n                if ( typeof $header.data( key ) !== 'undefined' ||\n                    typeof $header.data( key.toLowerCase() ) !== 'undefined' ) {\n                    // 'data-lockedOrder' is assigned to 'lockedorder'; but 'data-locked-order' is assigned to 'lockedOrder'\n                    // 'data-sort-initial-order' is assigned to 'sortInitialOrder'\n                    val += $header.data( key ) || $header.data( key.toLowerCase() );\n                } else if ( meta && typeof meta[ key ] !== 'undefined' ) {\n                    val += meta[ key ];\n                } else if ( configHeader && typeof configHeader[ key ] !== 'undefined' ) {\n                    val += configHeader[ key ];\n                } else if ( cl4ss !== ' ' && cl4ss.match( ' ' + key + '-' ) ) {\n                    // include sorter class name 'sorter-text', etc; now works with 'sorter-my-custom-parser'\n                    val = cl4ss.match( new RegExp( '\\\\s' + key + '-([\\\\w-]+)' ) )[ 1 ] || '';\n                }\n                return $.trim( val );\n            },\n\n            getColumnData : function( table, obj, indx, getCell, $headers ) {\n                if ( typeof obj !== 'object' || obj === null ) {\n                    return obj;\n                }\n                table = $( table )[ 0 ];\n                var $header, key,\n                    c = table.config,\n                    $cells = ( $headers || c.$headers ),\n                    // c.$headerIndexed is not defined initially\n                    $cell = c.$headerIndexed && c.$headerIndexed[ indx ] ||\n                        $cells.find( '[data-column=\"' + indx + '\"]:last' );\n                if ( typeof obj[ indx ] !== 'undefined' ) {\n                    return getCell ? obj[ indx ] : obj[ $cells.index( $cell ) ];\n                }\n                for ( key in obj ) {\n                    if ( typeof key === 'string' ) {\n                        $header = $cell\n                            // header cell with class/id\n                            .filter( key )\n                            // find elements within the header cell with cell/id\n                            .add( $cell.find( key ) );\n                        if ( $header.length ) {\n                            return obj[ key ];\n                        }\n                    }\n                }\n                return;\n            },\n\n            // *** Process table ***\n            // add processing indicator\n            isProcessing : function( $table, toggle, $headers ) {\n                $table = $( $table );\n                var c = $table[ 0 ].config,\n                    // default to all headers\n                    $header = $headers || $table.find( '.' + ts.css.header );\n                if ( toggle ) {\n                    // don't use sortList if custom $headers used\n                    if ( typeof $headers !== 'undefined' && c.sortList.length > 0 ) {\n                        // get headers from the sortList\n                        $header = $header.filter( function() {\n                            // get data-column from attr to keep compatibility with jQuery 1.2.6\n                            return this.sortDisabled ?\n                                false :\n                                ts.isValueInArray( parseFloat( $( this ).attr( 'data-column' ) ), c.sortList ) >= 0;\n                        });\n                    }\n                    $table.add( $header ).addClass( ts.css.processing + ' ' + c.cssProcessing );\n                } else {\n                    $table.add( $header ).removeClass( ts.css.processing + ' ' + c.cssProcessing );\n                }\n            },\n\n            // detach tbody but save the position\n            // don't use tbody because there are portions that look for a tbody index (updateCell)\n            processTbody : function( table, $tb, getIt ) {\n                table = $( table )[ 0 ];\n                if ( getIt ) {\n                    table.isProcessing = true;\n                    $tb.before( '<colgroup class=\"tablesorter-savemyplace\"/>' );\n                    return $.fn.detach ? $tb.detach() : $tb.remove();\n                }\n                var holdr = $( table ).find( 'colgroup.tablesorter-savemyplace' );\n                $tb.insertAfter( holdr );\n                holdr.remove();\n                table.isProcessing = false;\n            },\n\n            clearTableBody : function( table ) {\n                $( table )[ 0 ].config.$tbodies.children().detach();\n            },\n\n            // used when replacing accented characters during sorting\n            characterEquivalents : {\n                'a' : '\\u00e1\\u00e0\\u00e2\\u00e3\\u00e4\\u0105\\u00e5', // áàâãäąå\n                'A' : '\\u00c1\\u00c0\\u00c2\\u00c3\\u00c4\\u0104\\u00c5', // ÁÀÂÃÄĄÅ\n                'c' : '\\u00e7\\u0107\\u010d', // çćč\n                'C' : '\\u00c7\\u0106\\u010c', // ÇĆČ\n                'e' : '\\u00e9\\u00e8\\u00ea\\u00eb\\u011b\\u0119', // éèêëěę\n                'E' : '\\u00c9\\u00c8\\u00ca\\u00cb\\u011a\\u0118', // ÉÈÊËĚĘ\n                'i' : '\\u00ed\\u00ec\\u0130\\u00ee\\u00ef\\u0131', // íìİîïı\n                'I' : '\\u00cd\\u00cc\\u0130\\u00ce\\u00cf', // ÍÌİÎÏ\n                'o' : '\\u00f3\\u00f2\\u00f4\\u00f5\\u00f6\\u014d', // óòôõöō\n                'O' : '\\u00d3\\u00d2\\u00d4\\u00d5\\u00d6\\u014c', // ÓÒÔÕÖŌ\n                'ss': '\\u00df', // ß (s sharp)\n                'SS': '\\u1e9e', // ẞ (Capital sharp s)\n                'u' : '\\u00fa\\u00f9\\u00fb\\u00fc\\u016f', // úùûüů\n                'U' : '\\u00da\\u00d9\\u00db\\u00dc\\u016e' // ÚÙÛÜŮ\n            },\n\n            replaceAccents : function( str ) {\n                var chr,\n                    acc = '[',\n                    eq = ts.characterEquivalents;\n                if ( !ts.characterRegex ) {\n                    ts.characterRegexArray = {};\n                    for ( chr in eq ) {\n                        if ( typeof chr === 'string' ) {\n                            acc += eq[ chr ];\n                            ts.characterRegexArray[ chr ] = new RegExp( '[' + eq[ chr ] + ']', 'g' );\n                        }\n                    }\n                    ts.characterRegex = new RegExp( acc + ']' );\n                }\n                if ( ts.characterRegex.test( str ) ) {\n                    for ( chr in eq ) {\n                        if ( typeof chr === 'string' ) {\n                            str = str.replace( ts.characterRegexArray[ chr ], chr );\n                        }\n                    }\n                }\n                return str;\n            },\n\n            validateOptions : function( c ) {\n                var setting, setting2, typ, timer,\n                    // ignore options containing an array\n                    ignore = 'headers sortForce sortList sortAppend widgets'.split( ' ' ),\n                    orig = c.originalSettings;\n                if ( orig ) {\n                    if ( ts.debug(c, 'core') ) {\n                        timer = new Date();\n                    }\n                    for ( setting in orig ) {\n                        typ = typeof ts.defaults[setting];\n                        if ( typ === 'undefined' ) {\n                            console.warn( 'Tablesorter Warning! \"table.config.' + setting + '\" option not recognized' );\n                        } else if ( typ === 'object' ) {\n                            for ( setting2 in orig[setting] ) {\n                                typ = ts.defaults[setting] && typeof ts.defaults[setting][setting2];\n                                if ( $.inArray( setting, ignore ) < 0 && typ === 'undefined' ) {\n                                    console.warn( 'Tablesorter Warning! \"table.config.' + setting + '.' + setting2 + '\" option not recognized' );\n                                }\n                            }\n                        }\n                    }\n                    if ( ts.debug(c, 'core') ) {\n                        console.log( 'validate options time:' + ts.benchmark( timer ) );\n                    }\n                }\n            },\n\n            // restore headers\n            restoreHeaders : function( table ) {\n                var index, $cell,\n                    c = $( table )[ 0 ].config,\n                    $headers = c.$table.find( c.selectorHeaders ),\n                    len = $headers.length;\n                // don't use c.$headers here in case header cells were swapped\n                for ( index = 0; index < len; index++ ) {\n                    $cell = $headers.eq( index );\n                    // only restore header cells if it is wrapped\n                    // because this is also used by the updateAll method\n                    if ( $cell.find( '.' + ts.css.headerIn ).length ) {\n                        $cell.html( c.headerContent[ index ] );\n                    }\n                }\n            },\n\n            destroy : function( table, removeClasses, callback ) {\n                table = $( table )[ 0 ];\n                if ( !table.hasInitialized ) { return; }\n                // remove all widgets\n                ts.removeWidget( table, true, false );\n                var events,\n                    $t = $( table ),\n                    c = table.config,\n                    $h = $t.find( 'thead:first' ),\n                    $r = $h.find( 'tr.' + ts.css.headerRow ).removeClass( ts.css.headerRow + ' ' + c.cssHeaderRow ),\n                    $f = $t.find( 'tfoot:first > tr' ).children( 'th, td' );\n                if ( removeClasses === false && $.inArray( 'uitheme', c.widgets ) >= 0 ) {\n                    // reapply uitheme classes, in case we want to maintain appearance\n                    $t.triggerHandler( 'applyWidgetId', [ 'uitheme' ] );\n                    $t.triggerHandler( 'applyWidgetId', [ 'zebra' ] );\n                }\n                // remove widget added rows, just in case\n                $h.find( 'tr' ).not( $r ).remove();\n                // disable tablesorter - not using .unbind( namespace ) because namespacing was\n                // added in jQuery v1.4.3 - see http://api.jquery.com/event.namespace/\n                events = 'sortReset update updateRows updateAll updateHeaders updateCell addRows updateComplete sorton ' +\n                    'appendCache updateCache applyWidgetId applyWidgets refreshWidgets removeWidget destroy mouseup mouseleave ' +\n                    'keypress sortBegin sortEnd resetToLoadState '.split( ' ' )\n                        .join( c.namespace + ' ' );\n                $t\n                    .removeData( 'tablesorter' )\n                    .unbind( events.replace( ts.regex.spaces, ' ' ) );\n                c.$headers\n                    .add( $f )\n                    .removeClass( [ ts.css.header, c.cssHeader, c.cssAsc, c.cssDesc, ts.css.sortAsc, ts.css.sortDesc, ts.css.sortNone ].join( ' ' ) )\n                    .removeAttr( 'data-column' )\n                    .removeAttr( 'aria-label' )\n                    .attr( 'aria-disabled', 'true' );\n                $r\n                    .find( c.selectorSort )\n                    .unbind( ( 'mousedown mouseup keypress '.split( ' ' ).join( c.namespace + ' ' ) ).replace( ts.regex.spaces, ' ' ) );\n                ts.restoreHeaders( table );\n                $t.toggleClass( ts.css.table + ' ' + c.tableClass + ' tablesorter-' + c.theme, removeClasses === false );\n                $t.removeClass(c.namespace.slice(1));\n                // clear flag in case the plugin is initialized again\n                table.hasInitialized = false;\n                delete table.config.cache;\n                if ( typeof callback === 'function' ) {\n                    callback( table );\n                }\n                if ( ts.debug(c, 'core') ) {\n                    console.log( 'tablesorter has been removed' );\n                }\n            }\n\n        };\n\n        $.fn.tablesorter = function( settings ) {\n            return this.each( function() {\n                var table = this,\n                    // merge & extend config options\n                    c = $.extend( true, {}, ts.defaults, settings, ts.instanceMethods );\n                // save initial settings\n                c.originalSettings = settings;\n                // create a table from data (build table widget)\n                if ( !table.hasInitialized && ts.buildTable && this.nodeName !== 'TABLE' ) {\n                    // return the table (in case the original target is the table's container)\n                    ts.buildTable( table, c );\n                } else {\n                    ts.setup( table, c );\n                }\n            });\n        };\n\n        // set up debug logs\n        if ( !( window.console && window.console.log ) ) {\n            // access $.tablesorter.logs for browsers that don't have a console...\n            ts.logs = [];\n            /*jshint -W020 */\n            console = {};\n            console.log = console.warn = console.error = console.table = function() {\n                var arg = arguments.length > 1 ? arguments : arguments[0];\n                ts.logs[ ts.logs.length ] = { date: Date.now(), log: arg };\n            };\n        }\n\n        // add default parsers\n        ts.addParser({\n            id : 'no-parser',\n            is : function() {\n                return false;\n            },\n            format : function() {\n                return '';\n            },\n            type : 'text'\n        });\n\n        ts.addParser({\n            id : 'text',\n            is : function() {\n                return true;\n            },\n            format : function( str, table ) {\n                var c = table.config;\n                if ( str ) {\n                    str = $.trim( c.ignoreCase ? str.toLocaleLowerCase() : str );\n                    str = c.sortLocaleCompare ? ts.replaceAccents( str ) : str;\n                }\n                return str;\n            },\n            type : 'text'\n        });\n\n        ts.regex.nondigit = /[^\\w,. \\-()]/g;\n        ts.addParser({\n            id : 'digit',\n            is : function( str ) {\n                return ts.isDigit( str );\n            },\n            format : function( str, table ) {\n                var num = ts.formatFloat( ( str || '' ).replace( ts.regex.nondigit, '' ), table );\n                return str && typeof num === 'number' ? num :\n                    str ? $.trim( str && table.config.ignoreCase ? str.toLocaleLowerCase() : str ) : str;\n            },\n            type : 'numeric'\n        });\n\n        ts.regex.currencyReplace = /[+\\-,. ]/g;\n        ts.regex.currencyTest = /^\\(?\\d+[\\u00a3$\\u20ac\\u00a4\\u00a5\\u00a2?.]|[\\u00a3$\\u20ac\\u00a4\\u00a5\\u00a2?.]\\d+\\)?$/;\n        ts.addParser({\n            id : 'currency',\n            is : function( str ) {\n                str = ( str || '' ).replace( ts.regex.currencyReplace, '' );\n                // test for £$€¤¥¢\n                return ts.regex.currencyTest.test( str );\n            },\n            format : function( str, table ) {\n                var num = ts.formatFloat( ( str || '' ).replace( ts.regex.nondigit, '' ), table );\n                return str && typeof num === 'number' ? num :\n                    str ? $.trim( str && table.config.ignoreCase ? str.toLocaleLowerCase() : str ) : str;\n            },\n            type : 'numeric'\n        });\n\n        // too many protocols to add them all https://en.wikipedia.org/wiki/URI_scheme\n        // now, this regex can be updated before initialization\n        ts.regex.urlProtocolTest = /^(https?|ftp|file):\\/\\//;\n        ts.regex.urlProtocolReplace = /(https?|ftp|file):\\/\\/(www\\.)?/;\n        ts.addParser({\n            id : 'url',\n            is : function( str ) {\n                return ts.regex.urlProtocolTest.test( str );\n            },\n            format : function( str ) {\n                return str ? $.trim( str.replace( ts.regex.urlProtocolReplace, '' ) ) : str;\n            },\n            type : 'text'\n        });\n\n        ts.regex.dash = /-/g;\n        ts.regex.isoDate = /^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}/;\n        ts.addParser({\n            id : 'isoDate',\n            is : function( str ) {\n                return ts.regex.isoDate.test( str );\n            },\n            format : function( str ) {\n                var date = str ? new Date( str.replace( ts.regex.dash, '/' ) ) : str;\n                return date instanceof Date && isFinite( date ) ? date.getTime() : str;\n            },\n            type : 'numeric'\n        });\n\n        ts.regex.percent = /%/g;\n        ts.regex.percentTest = /(\\d\\s*?%|%\\s*?\\d)/;\n        ts.addParser({\n            id : 'percent',\n            is : function( str ) {\n                return ts.regex.percentTest.test( str ) && str.length < 15;\n            },\n            format : function( str, table ) {\n                return str ? ts.formatFloat( str.replace( ts.regex.percent, '' ), table ) : str;\n            },\n            type : 'numeric'\n        });\n\n        // added image parser to core v2.17.9\n        ts.addParser({\n            id : 'image',\n            is : function( str, table, node, $node ) {\n                return $node.find( 'img' ).length > 0;\n            },\n            format : function( str, table, cell ) {\n                return $( cell ).find( 'img' ).attr( table.config.imgAttr || 'alt' ) || str;\n            },\n            parsed : true, // filter widget flag\n            type : 'text'\n        });\n\n        ts.regex.dateReplace = /(\\S)([AP]M)$/i; // used by usLongDate & time parser\n        ts.regex.usLongDateTest1 = /^[A-Z]{3,10}\\.?\\s+\\d{1,2},?\\s+(\\d{4})(\\s+\\d{1,2}:\\d{2}(:\\d{2})?(\\s+[AP]M)?)?$/i;\n        ts.regex.usLongDateTest2 = /^\\d{1,2}\\s+[A-Z]{3,10}\\s+\\d{4}/i;\n        ts.addParser({\n            id : 'usLongDate',\n            is : function( str ) {\n                // two digit years are not allowed cross-browser\n                // Jan 01, 2013 12:34:56 PM or 01 Jan 2013\n                return ts.regex.usLongDateTest1.test( str ) || ts.regex.usLongDateTest2.test( str );\n            },\n            format : function( str ) {\n                var date = str ? new Date( str.replace( ts.regex.dateReplace, '$1 $2' ) ) : str;\n                return date instanceof Date && isFinite( date ) ? date.getTime() : str;\n            },\n            type : 'numeric'\n        });\n\n        // testing for ##-##-#### or ####-##-##, so it's not perfect; time can be included\n        ts.regex.shortDateTest = /(^\\d{1,2}[\\/\\s]\\d{1,2}[\\/\\s]\\d{4})|(^\\d{4}[\\/\\s]\\d{1,2}[\\/\\s]\\d{1,2})/;\n        // escaped \"-\" because JSHint in Firefox was showing it as an error\n        ts.regex.shortDateReplace = /[\\-.,]/g;\n        // XXY covers MDY & DMY formats\n        ts.regex.shortDateXXY = /(\\d{1,2})[\\/\\s](\\d{1,2})[\\/\\s](\\d{4})/;\n        ts.regex.shortDateYMD = /(\\d{4})[\\/\\s](\\d{1,2})[\\/\\s](\\d{1,2})/;\n        ts.convertFormat = function( dateString, format ) {\n            dateString = ( dateString || '' )\n                .replace( ts.regex.spaces, ' ' )\n                .replace( ts.regex.shortDateReplace, '/' );\n            if ( format === 'mmddyyyy' ) {\n                dateString = dateString.replace( ts.regex.shortDateXXY, '$3/$1/$2' );\n            } else if ( format === 'ddmmyyyy' ) {\n                dateString = dateString.replace( ts.regex.shortDateXXY, '$3/$2/$1' );\n            } else if ( format === 'yyyymmdd' ) {\n                dateString = dateString.replace( ts.regex.shortDateYMD, '$1/$2/$3' );\n            }\n            var date = new Date( dateString );\n            return date instanceof Date && isFinite( date ) ? date.getTime() : '';\n        };\n\n        ts.addParser({\n            id : 'shortDate', // 'mmddyyyy', 'ddmmyyyy' or 'yyyymmdd'\n            is : function( str ) {\n                str = ( str || '' ).replace( ts.regex.spaces, ' ' ).replace( ts.regex.shortDateReplace, '/' );\n                return ts.regex.shortDateTest.test( str );\n            },\n            format : function( str, table, cell, cellIndex ) {\n                if ( str ) {\n                    var c = table.config,\n                        $header = c.$headerIndexed[ cellIndex ],\n                        format = $header.length && $header.data( 'dateFormat' ) ||\n                            ts.getData( $header, ts.getColumnData( table, c.headers, cellIndex ), 'dateFormat' ) ||\n                            c.dateFormat;\n                    // save format because getData can be slow...\n                    if ( $header.length ) {\n                        $header.data( 'dateFormat', format );\n                    }\n                    return ts.convertFormat( str, format ) || str;\n                }\n                return str;\n            },\n            type : 'numeric'\n        });\n\n        // match 24 hour time & 12 hours time + am/pm - see http://regexr.com/3c3tk\n        ts.regex.timeTest = /^(0?[1-9]|1[0-2]):([0-5]\\d)(\\s[AP]M)$|^((?:[01]\\d|[2][0-4]):[0-5]\\d)$/i;\n        ts.regex.timeMatch = /(0?[1-9]|1[0-2]):([0-5]\\d)(\\s[AP]M)|((?:[01]\\d|[2][0-4]):[0-5]\\d)/i;\n        ts.addParser({\n            id : 'time',\n            is : function( str ) {\n                return ts.regex.timeTest.test( str );\n            },\n            format : function( str ) {\n                // isolate time... ignore month, day and year\n                var temp,\n                    timePart = ( str || '' ).match( ts.regex.timeMatch ),\n                    orig = new Date( str ),\n                    // no time component? default to 00:00 by leaving it out, but only if str is defined\n                    time = str && ( timePart !== null ? timePart[ 0 ] : '00:00 AM' ),\n                    date = time ? new Date( '2000/01/01 ' + time.replace( ts.regex.dateReplace, '$1 $2' ) ) : time;\n                if ( date instanceof Date && isFinite( date ) ) {\n                    temp = orig instanceof Date && isFinite( orig ) ? orig.getTime() : 0;\n                    // if original string was a valid date, add it to the decimal so the column sorts in some kind of order\n                    // luckily new Date() ignores the decimals\n                    return temp ? parseFloat( date.getTime() + '.' + orig.getTime() ) : date.getTime();\n                }\n                return str;\n            },\n            type : 'numeric'\n        });\n\n        ts.addParser({\n            id : 'metadata',\n            is : function() {\n                return false;\n            },\n            format : function( str, table, cell ) {\n                var c = table.config,\n                    p = ( !c.parserMetadataName ) ? 'sortValue' : c.parserMetadataName;\n                return $( cell ).metadata()[ p ];\n            },\n            type : 'numeric'\n        });\n\n        /*\n            ██████ ██████ █████▄ █████▄ ▄████▄\n              ▄█▀  ██▄▄   ██▄▄██ ██▄▄██ ██▄▄██\n            ▄█▀    ██▀▀   ██▀▀██ ██▀▀█  ██▀▀██\n            ██████ ██████ █████▀ ██  ██ ██  ██\n            */\n        // add default widgets\n        ts.addWidget({\n            id : 'zebra',\n            priority : 90,\n            format : function( table, c, wo ) {\n                var $visibleRows, $row, count, isEven, tbodyIndex, rowIndex, len,\n                    child = new RegExp( c.cssChildRow, 'i' ),\n                    $tbodies = c.$tbodies.add( $( c.namespace + '_extra_table' ).children( 'tbody:not(.' + c.cssInfoBlock + ')' ) );\n                for ( tbodyIndex = 0; tbodyIndex < $tbodies.length; tbodyIndex++ ) {\n                    // loop through the visible rows\n                    count = 0;\n                    $visibleRows = $tbodies.eq( tbodyIndex ).children( 'tr:visible' ).not( c.selectorRemove );\n                    len = $visibleRows.length;\n                    for ( rowIndex = 0; rowIndex < len; rowIndex++ ) {\n                        $row = $visibleRows.eq( rowIndex );\n                        // style child rows the same way the parent row was styled\n                        if ( !child.test( $row[ 0 ].className ) ) { count++; }\n                        isEven = ( count % 2 === 0 );\n                        $row\n                            .removeClass( wo.zebra[ isEven ? 1 : 0 ] )\n                            .addClass( wo.zebra[ isEven ? 0 : 1 ] );\n                    }\n                }\n            },\n            remove : function( table, c, wo, refreshing ) {\n                if ( refreshing ) { return; }\n                var tbodyIndex, $tbody,\n                    $tbodies = c.$tbodies,\n                    toRemove = ( wo.zebra || [ 'even', 'odd' ] ).join( ' ' );\n                for ( tbodyIndex = 0; tbodyIndex < $tbodies.length; tbodyIndex++ ) {\n                    $tbody = ts.processTbody( table, $tbodies.eq( tbodyIndex ), true ); // remove tbody\n                    $tbody.children().removeClass( toRemove );\n                    ts.processTbody( table, $tbody, false ); // restore tbody\n                }\n            }\n        });\n\n    })( jQuery );\n    return jQuery.tablesorter;}));"],"names":["factory","jQuery","$","ts","tablesorter","version","parsers","widgets","defaults","theme","widthFixed","showProcessing","headerTemplate","onRenderTemplate","onRenderHeader","cancelSelection","tabIndex","dateFormat","sortMultiSortKey","sortResetKey","usNumberFormat","delayInit","serverSideSorting","resort","headers","ignoreCase","sortForce","sortList","sortAppend","sortStable","sortInitialOrder","sortLocaleCompare","sortReset","sortRestart","emptyTo","stringTo","duplicateSpan","textExtraction","textAttribute","textSorter","numberSorter","initWidgets","widgetClass","widgetOptions","zebra","initialized","tableClass","cssAsc","cssDesc","cssNone","cssHeader","cssHeaderRow","cssProcessing","cssChildRow","cssInfoBlock","cssNoSort","cssIgnoreRow","cssIcon","cssIconNone","cssIconAsc","cssIconDesc","cssIconDisabled","pointerClick","pointerDown","pointerUp","selectorHeaders","selectorSort","selectorRemove","debug","headerList","empties","strings","globalize","imgAttr","css","table","cssHasChild","childRow","colgroup","header","headerRow","headerIn","icon","processing","sortAsc","sortDesc","sortNone","language","sortDisabled","nextAsc","nextDesc","nextNone","regex","templateContent","templateIcon","templateName","spaces","nonWord","formElements","chunk","chunks","hex","comma","digitNonUS","digitNegativeTest","digitNegativeReplace","digitTest","digitReplace","string","max","min","emptymin","emptymax","zero","none","top","bottom","keyCodes","enter","dates","instanceMethods","setup","c","tHead","tBodies","length","hasInitialized","tmp","$table","meta","metadata","isProcessing","config","data","console","group","Date","supportsDataObject","fn","jquery","split","parseInt","toLowerCase","last","clickedIndex","test","attr","namespace","replace","Math","random","toString","slice","addClass","$headers","find","children","$tbodies","id","widgetInit","buildHeaders","fixColumnWidth","addWidgetFromClass","applyWidgetOptions","setupParsers","totalRows","validateOptions","buildCache","bindEvents","bindMethods","sortlist","applyWidget","sortOn","setHeadersCss","unbind","bind","e","clearTimeout","timerProcessing","type","setTimeout","log","benchmark","groupEnd","triggerHandler","warn","error","events","join","callback","stopPropagation","this","isApplyingWidgets","updateAll","update","updateHeaders","cell","updateCell","$row","addRows","isUpdating","list","init","appendCache","isFunction","updateCache","applyWidgetId","all","dontapply","refreshWidgets","name","refreshing","removeWidget","removeClasses","destroy","extend","originalSettings","core","downTarget","getClosest","nodeName","add","filter","external","$cell","temp","$target","target","which","button","match","preventDefault","hasClass","parents","isEmptyObject","cache","index","$headerIndexed","initSort","$temp","timer","indx","headerContent","sortVars","columns","computeColumnIndex","map","elem","configHeaders","column","template","$elem","getColumnData","html","apply","getOrder","getData","count","order","lockedOrder","sortedBy","not","scope","role","updateHeader","addInstanceMethods","methods","rows","span","colIndex","noParser","parser","extractor","time","tbody","len","tbodyIndex","debugOutput","extractors","getParserById","emptyToBottom","detectParserForColumn","text","empty","colSpan","addParser","rowIndex","cellIndex","cur","$node","row","node","nodeValue","keepLooking","className","indexOf","cells","getElementText","is","extract","trim","textContent","getParsedText","txt","val","format","$tbody","cols","$cells","cacheTime","rowData","prevRowData","colMax","cacheIndex","hasParser","normalized","child","raw","prev","abs","getColumnText","rowFilter","tbodyLen","rowLen","parsed","result","hasCallback","allColumns","eq","aria","updateColumnSort","$el","removeClass","$extras","$sorted","end","i","include","col","isValueInArray","setColumnAriaLabel","selector","closest","$header","nextSort","vars","removeAttr","isDisabled","setColumnSort","updateHeaderSortCount","dir","primary","inArray","commonUpdate","resortComplete","remove","icell","tbcache","checkResort","valid","append","$curTbody","appendTime","appender","processTbody","pager","removeRows","ajax","event","arry","headerIndx","notMultiSort","th","each","splice","isArray","multisort","sortTime","sorter","sortLen","sort","a","b","sortIndex","num","x","y","getSortType","sortNatural","aNum","bNum","aFloat","bFloat","isNaN","parseFloat","sortNaturalAsc","sortNaturalDesc","sortText","getTextValue","n","charCodeAt","sortNumericAsc","sortNumericDesc","sortNumeric","addWidget","widget","getWidgetById","hasWidget","wo","options","RegExp","applied","names","timerReady","grep","priority","doAll","curWidgets","diff","getTime","arguments","obj","formatFloat","str","isDigit","$rows","j","k","l","rowSpan","firstAvailCol","matrix","matrixrow","Array","setAttribute","checkColumnCount","el","parentElement","push","overallWidth","percent","$colgroup","width","prepend","configHeader","key","cl4ss","getCell","toggle","$tb","getIt","before","detach","holdr","insertAfter","clearTableBody","characterEquivalents","replaceAccents","chr","acc","characterRegex","characterRegexArray","setting","setting2","typ","ignore","orig","restoreHeaders","$t","$h","$r","$f","removeData","toggleClass","settings","buildTable","window","logs","arg","date","now","toLocaleLowerCase","nondigit","currencyReplace","currencyTest","urlProtocolTest","urlProtocolReplace","dash","isoDate","isFinite","percentTest","dateReplace","usLongDateTest1","usLongDateTest2","shortDateTest","shortDateReplace","shortDateXXY","shortDateYMD","convertFormat","dateString","timeTest","timeMatch","timePart","p","parserMetadataName","$visibleRows","isEven","toRemove","define","amd","module","exports","require"],"mappings":"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"}